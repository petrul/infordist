plugins {
    id 'java'
    id 'groovy'
    id 'idea'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'maven-publish'
}

group = 'pertinence'
version = '1.3'
description = 'Infordist searcher app'

java {
    sourceCompatibility = '19'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()

    maven { url = "file:///gv0/repo/releases" }
    maven { url = "file:///gv0/repo/snapshots" }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'commons-io:commons-io:1.4'
    implementation 'commons-lang:commons-lang:2.4'
    implementation 'commons-discovery:commons-discovery:0.4'
    implementation 'com.thoughtworks.xstream:xstream:1.3'
    implementation 'org.apache.lucene:lucene-core:2.4.1'
    implementation 'org.apache.lucene:lucene-analyzers:2.4.1'
    implementation 'org.apache.lucene:lucene-wikipedia:2.4.1'
    implementation 'org.apache.lucene:lucene-spellchecker:2.4.1'
    implementation 'org.apache.lucene:lucene-snowball:2.4.1'
    implementation('pertinence:indexer_app:1.1-SNAPSHOT') { exclude group: 'org.codehaus.groovy' }

    implementation 'org.apache.groovy:groovy-all:4.0.12'

    implementation 'javax.faces:jsf-api:1.2_09-b01'
    implementation 'javax.faces:jsf-impl:1.2-20'
    implementation 'javax.servlet:jstl:1.2'
    implementation 'commons-el:commons-el:1.0'
    implementation 'org.icefaces:icefaces:1.8.2'
    implementation 'org.icefaces:icefaces-comps:1.8.2'
    implementation 'org.icefaces:icefaces-facelets:1.8.2'
    implementation 'com.sun.facelets:jsf-facelets:1.1.11'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}


publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

bootJar {
    archiveClassifier = 'application'
    archiveAppendix = "b" + System.getenv()['BUILD_NUMBER']
}

// the ionic client
task runAppIonicBuild {
    final String dir = "src/main/webapp/ionic-client"
//    final subpath="app"
    doLast {
        exec {
            workingDir "./$dir"
            executable 'npm'
            args 'install'
        }
        exec {
            workingDir "./$dir"
            executable 'ionic'
            args 'build', "--prod",  "--", "--base-href=/"
        }
        copy {
            from "./$dir/www/"
            into "$buildDir/resources/main/static/"
        }
    }
}

task ionic  {
    dependsOn runAppIonicBuild
}

//tasks.processResources.dependsOn << runAdminIonicBuild
tasks.bootRun.dependsOn << ionic
tasks.jar.dependsOn << ionic
tasks.bootJar.dependsOn << ionic

// docker

def runShellCommand(String cmd) {
    p "\$ $cmd"
    final proc = cmd.execute()
    p "stdout follows: "
    p "==============="
    p proc.text
    p "==============="
    proc.waitFor()

    final exitValue = proc.exitValue()
    p "exit value: $exitValue"
    if (exitValue != 0) {
        throw new GroovyRuntimeException("cmd $cmd finished with non-zero exit value $exitValue")
    }
}

final imagelabel="editii/infordist_searcher_app:$version"
tasks.register("docker") {
    dependsOn 'build'
    doLast {
        runShellCommand("pwd")
        final cmd = """docker build \
            -f docker/dockerfile            \
            -t $imagelabel ."""
        runShellCommand(cmd)
    }
}

final registry = "mini.local:5000"
tasks.register("docker-publish") {
    dependsOn("docker")
    doLast {
        runShellCommand("pwd")
        final remoteimagelabel = "$registry/$imagelabel"
        def cmd = "docker tag $imagelabel $remoteimagelabel"

        runShellCommand(cmd)

        cmd = "docker push $remoteimagelabel"

        runShellCommand(cmd)
    }
}

def p(args) { println(args) }

// this for bug in gradle 8 on starting main from idea
gradle.taskGraph.whenReady {
    tasks.withType(JavaExec) {
        if (name.endsWith(".main()")) {
            println("Setting executable to java launcher for ${name}")
            it.setExecutable(javaLauncher.get().executablePath.asFile.absolutePath)
        }
    }
}