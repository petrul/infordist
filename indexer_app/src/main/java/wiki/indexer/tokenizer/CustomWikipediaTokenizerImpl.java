/* The following code was generated by JFlex 1.4.3 on 4/9/09 12:04 PM */

package wiki.indexer.tokenizer;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.lucene.analysis.Token;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/9/09 12:04 PM from the specification file
 * <tt>CustomWikipediaTokenizerImpl.jflex</tt>
 */
@SuppressWarnings("unused")
class CustomWikipediaTokenizerImpl {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int DOUBLE_BRACE_STATE = 16;
  public static final int INTERNAL_LINK_STATE = 4;
  public static final int TWO_SINGLE_QUOTES_STATE = 8;
  public static final int CATEGORY_STATE = 2;
  public static final int FIVE_SINGLE_QUOTES_STATE = 12;
  public static final int STRING = 18;
  public static final int INFOBOX_STATE = 20;
  public static final int YYINITIAL = 0;
  public static final int DOUBLE_EQUALS_STATE = 14;
  public static final int THREE_SINGLE_QUOTES_STATE = 10;
  public static final int EXTERNAL_LINK_STATE = 6;
  public static final int XML_COMMENT_STATE = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\61\1\60\1\0\1\61\1\57\22\0\1\61\1\100\1\71"+
    "\1\44\1\0\1\45\1\4\1\2\1\7\1\7\2\0\1\53\1\1"+
    "\1\3\1\41\12\55\1\40\1\47\1\70\1\43\1\72\1\42\1\5"+
    "\2\77\1\35\1\33\1\103\1\30\1\25\1\77\1\27\1\23\1\77"+
    "\1\104\1\77\1\26\1\34\1\24\2\77\1\31\2\77\1\32\4\77"+
    "\1\62\1\0\1\63\1\0\1\6\1\0\1\64\1\50\1\22\1\20"+
    "\1\65\1\15\1\12\1\36\1\14\1\10\1\105\1\46\1\101\1\13"+
    "\1\21\1\11\1\51\1\66\1\16\1\37\1\52\1\17\1\102\1\73"+
    "\1\67\1\77\1\74\1\76\1\75\1\42\101\0\27\54\1\0\37\54"+
    "\1\0\u0568\54\12\56\206\54\12\56\u026c\54\12\56\166\54\12\56\166\54"+
    "\12\56\166\54\12\56\166\54\12\56\167\54\11\56\166\54\12\56\166\54"+
    "\12\56\166\54\12\56\340\54\12\56\166\54\12\56\u0166\54\12\56\u0fb6\54"+
    "\ue000\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\3\1\5\2\2\1\3\2\1\1\1\3\1\2"+
    "\2\1\10\4\5\5\1\4\2\5\2\6\2\7\1\10"+
    "\2\6\1\11\1\12\1\6\1\13\1\14\1\13\2\15"+
    "\1\6\2\15\3\6\3\16\1\17\2\16\1\20\2\16"+
    "\1\21\3\22\2\23\6\22\7\24\15\0\7\2\1\25"+
    "\1\0\1\2\6\0\1\26\1\2\3\0\1\27\2\0"+
    "\1\30\10\0\3\5\3\0\1\31\2\5\1\7\1\0"+
    "\1\32\1\33\1\15\1\30\2\15\1\0\1\34\1\0"+
    "\1\35\1\0\1\23\1\0\1\36\3\0\1\37\5\0"+
    "\1\40\1\41\1\37\2\40\2\42\2\0\1\40\7\2"+
    "\1\25\2\0\1\2\10\40\2\0\1\2\5\0\1\24"+
    "\16\0\1\24\12\0\1\24\3\5\4\24\2\5\1\7"+
    "\1\43\2\0\1\15\1\30\2\15\1\0\1\44\1\45"+
    "\2\0\1\23\4\0\1\24\5\0\1\37\1\46\1\37"+
    "\1\46\1\0\7\2\1\25\1\0\1\2\1\0\2\37"+
    "\2\46\1\0\1\2\3\0\1\47\13\0\1\24\5\0"+
    "\2\5\1\24\1\5\1\7\1\0\1\15\1\30\1\24"+
    "\1\15\3\0\1\23\3\0\1\37\3\40\1\37\1\40"+
    "\1\50\7\2\1\0\1\25\1\0\1\2\1\37\10\0"+
    "\2\24\2\5\1\7\2\0\1\15\1\0\1\24\1\15"+
    "\1\0\1\51\1\0\1\23\1\52\4\0\2\2\6\0"+
    "\1\6\1\5\3\0\1\15\2\0\1\53\1\0\2\2"+
    "\1\0\1\24\10\0\1\15\3\0\1\2\1\0\2\24"+
    "\6\0\1\27\10\0\1\53\1\2\6\0\1\27\1\54"+
    "\4\0\1\54\1\2\1\55\4\0\1\56\1\0\1\24"+
    "\3\0\1\24\1\57\1\60\1\61\1\0\3\24";

  private static int [] zzUnpackAction() {
    int [] result = new int[467];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a"+
    "\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604\0\u064a"+
    "\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0348\0\u03d4"+
    "\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8\0\u0a1e"+
    "\0\u0a64\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2\0\u0348\0\u03d4"+
    "\0\u0c08\0\u0c4e\0\u0348\0\u0906\0\u094c\0\u0c94\0\u0cda\0\u0d20"+
    "\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50"+
    "\0\u0834\0\u0f96\0\u0fdc\0\u0348\0\u1022\0\u03d4\0\u1068\0\u10ae"+
    "\0\u10f4\0\u113a\0\u0906\0\u094c\0\u0348\0\u0348\0\u0992\0\u03d4"+
    "\0\u1180\0\u11c6\0\u120c\0\u1252\0\u0906\0\u1298\0\u12de\0\u1324"+
    "\0\u0348\0\u136a\0\u03d4\0\u0834\0\u13b0\0\u0906\0\u094c\0\u038e"+
    "\0\u13f6\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0"+
    "\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810"+
    "\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa\0\u1a40"+
    "\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70"+
    "\0\u1cb6\0\u1cfc\0\u0834\0\u1d42\0\u0348\0\u1d88\0\u1cfc\0\u0992"+
    "\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8"+
    "\0\u1ffe\0\u2044\0\u208a\0\u0348\0\u20d0\0\u2116\0\u215c\0\u21a2"+
    "\0\u21e8\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c"+
    "\0\u23d2\0\u2418\0\u120c\0\u245e\0\u24a4\0\u0348\0\u24ea\0\u1324"+
    "\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a"+
    "\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u1626\0\u2878\0\u28be\0\u2904"+
    "\0\u294a\0\u2990\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u2b34"+
    "\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64"+
    "\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08\0\u2f4e\0\u2f94"+
    "\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u2f94\0\u30f2\0\u3138\0\u317e"+
    "\0\u31c4\0\u320a\0\u3250\0\u3296\0\u32dc\0\u3322\0\u3368\0\u33ae"+
    "\0\u33f4\0\u343a\0\u3480\0\u34c6\0\u350c\0\u3552\0\u3598\0\u35de"+
    "\0\u3624\0\u366a\0\u36b0\0\u36f6\0\u373c\0\u3782\0\u37c8\0\u380e"+
    "\0\u3854\0\u389a\0\u38e0\0\u3926\0\u396c\0\u39b2\0\u39f8\0\u3a3e"+
    "\0\u3a84\0\u0348\0\u3aca\0\u3b10\0\u3b56\0\u3b9c\0\u3be2\0\u3c28"+
    "\0\u3c6e\0\u3cb4\0\u0348\0\u3cfa\0\u3d40\0\u3d86\0\u3dcc\0\u3e12"+
    "\0\u3e58\0\u3e9e\0\u3ee4\0\u3f2a\0\u3f70\0\u3fb6\0\u3ffc\0\u4042"+
    "\0\u4088\0\u40ce\0\u4114\0\u415a\0\u41a0\0\u41e6\0\u422c\0\u4272"+
    "\0\u42b8\0\u42fe\0\u4344\0\u438a\0\u43d0\0\u4416\0\u445c\0\u44a2"+
    "\0\u44e8\0\u452e\0\u15e0\0\u1b58\0\u4574\0\u45ba\0\u4600\0\u4646"+
    "\0\u468c\0\u0348\0\u46d2\0\u4718\0\u475e\0\u47a4\0\u47ea\0\u4830"+
    "\0\u4876\0\u48bc\0\u4902\0\u4948\0\u498e\0\u1ee6\0\u49d4\0\u4a1a"+
    "\0\u4a60\0\u4aa6\0\u4aec\0\u4b32\0\u4b78\0\u09d8\0\u4bbe\0\u4c04"+
    "\0\u4c4a\0\u4c90\0\u4cd6\0\u4d1c\0\u4d62\0\u4da8\0\u4dee\0\u4e34"+
    "\0\u4e7a\0\u4ec0\0\u4f06\0\u4f4c\0\u4f92\0\u4fd8\0\u501e\0\u5064"+
    "\0\u50aa\0\u50f0\0\u5136\0\u517c\0\u51c2\0\u5208\0\u524e\0\u5294"+
    "\0\u52da\0\u5320\0\u5366\0\u0348\0\u53ac\0\u53f2\0\u5438\0\u547e"+
    "\0\u54c4\0\u550a\0\u5550\0\u5596\0\u55dc\0\u5622\0\u5668\0\u56ae"+
    "\0\u56f4\0\u573a\0\u5780\0\u57c6\0\u580c\0\u5852\0\u5898\0\u58de"+
    "\0\u0e38\0\u5924\0\u596a\0\u0348\0\u59b0\0\u59f6\0\u4ec0\0\u5a3c"+
    "\0\u5a82\0\u5ac8\0\u5b0e\0\u5b54\0\u5b9a\0\u5be0\0\u5c26\0\u5c6c"+
    "\0\u5cb2\0\u5cf8\0\u5d3e\0\u1d88\0\u5d84\0\u5dca\0\u5e10\0\u5e56"+
    "\0\u5e9c\0\u5ee2\0\u5f28\0\u5a82\0\u5f6e\0\u5fb4\0\u5ffa\0\u6040"+
    "\0\u6086\0\u60cc\0\u6112\0\u6158\0\u619e\0\u61e4\0\u622a\0\u6270"+
    "\0\u62b6\0\u62fc\0\u6342\0\u6388\0\u63ce\0\u6414\0\u645a\0\u64a0"+
    "\0\u64e6\0\u652c\0\u6572\0\u65b8\0\u65fe\0\u6644\0\u668a\0\u2f94"+
    "\0\u66d0\0\u6716\0\u675c\0\u67a2\0\u67e8\0\u682e\0\u6874\0\u68ba"+
    "\0\u63ce\0\u6900\0\u6946\0\u698c\0\u69d2\0\u6a18\0\u6a5e\0\u6aa4"+
    "\0\u0348\0\u0348\0\u6aea\0\u6b30\0\u6b76\0\u6bbc\0\u3dcc\0\u6c02"+
    "\0\u6c48\0\u6c8e\0\u6cd4\0\u6d1a\0\u6d60\0\u6da6\0\u6dec\0\u6e32"+
    "\0\u6e78\0\u6ebe\0\u6f04\0\u6f4a\0\u0348\0\u0348\0\u0348\0\u6f90"+
    "\0\u6f04\0\u6fd6\0\u6f90";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[467];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\1\16\2\15\1\17\1\15\2\16\5\20\1\21"+
    "\1\22\3\20\1\23\13\20\1\24\1\20\3\15\1\25"+
    "\1\26\1\15\1\20\1\15\1\27\2\20\1\15\1\20"+
    "\1\30\1\31\1\32\2\15\1\33\1\15\1\34\3\20"+
    "\1\35\2\15\1\20\1\36\2\15\1\20\1\15\5\20"+
    "\4\37\1\40\3\37\30\41\6\37\1\41\1\37\3\41"+
    "\1\37\3\41\1\42\3\37\1\43\4\41\1\44\2\37"+
    "\1\41\1\45\2\37\1\41\1\37\5\41\1\37\1\46"+
    "\2\37\1\40\1\37\2\46\4\47\1\50\12\47\1\50"+
    "\7\47\1\51\6\37\1\52\1\37\3\47\1\37\1\47"+
    "\2\53\1\42\3\37\1\54\2\47\1\55\1\47\1\44"+
    "\2\37\1\47\1\45\2\37\1\47\1\37\1\47\1\56"+
    "\3\47\4\57\1\60\3\57\26\61\1\62\1\61\6\57"+
    "\1\61\1\57\3\61\1\57\3\61\1\42\2\37\1\57"+
    "\1\63\4\61\1\64\2\57\1\61\1\65\2\57\1\61"+
    "\1\57\5\61\2\57\1\66\1\57\1\60\3\57\30\67"+
    "\6\57\1\67\1\57\3\67\1\57\3\67\1\70\2\57"+
    "\1\71\1\57\4\67\1\64\2\57\1\67\1\65\2\57"+
    "\1\67\1\57\5\67\4\57\1\60\3\57\30\72\6\57"+
    "\1\72\1\57\3\72\1\57\3\72\1\70\2\57\1\71"+
    "\1\57\4\72\1\64\2\57\1\72\1\65\2\57\1\72"+
    "\1\57\5\72\4\57\1\60\3\57\30\72\6\57\1\72"+
    "\1\57\3\72\1\57\3\72\1\70\2\57\1\73\1\57"+
    "\4\72\1\64\2\57\1\72\1\65\2\57\1\72\1\57"+
    "\5\72\4\57\1\60\3\57\26\74\1\75\1\74\3\57"+
    "\1\76\2\57\1\77\1\57\3\74\1\57\3\74\1\70"+
    "\4\57\1\74\1\100\2\74\1\64\2\57\1\74\1\65"+
    "\2\57\1\74\1\57\2\74\1\100\1\77\1\74\4\57"+
    "\1\60\3\57\30\101\6\57\1\101\1\57\3\101\1\57"+
    "\3\101\1\70\4\57\4\101\1\102\2\57\1\101\1\65"+
    "\1\103\1\57\1\101\1\57\5\101\2\104\1\105\1\104"+
    "\1\106\3\104\30\107\3\104\1\110\2\104\1\107\1\104"+
    "\3\107\1\104\3\107\1\111\2\104\1\112\1\104\4\107"+
    "\1\113\2\104\1\107\1\114\1\104\1\115\1\107\1\104"+
    "\5\107\1\116\1\117\2\116\1\120\1\116\2\117\26\121"+
    "\1\122\1\121\6\116\1\121\1\116\3\121\1\116\1\121"+
    "\1\123\1\121\1\124\4\116\4\121\1\125\2\116\1\121"+
    "\1\126\1\127\1\130\1\121\1\116\5\121\1\131\1\132"+
    "\2\131\1\133\3\131\30\134\6\131\1\134\1\131\3\134"+
    "\1\131\3\134\1\135\4\131\4\134\1\136\2\131\1\134"+
    "\1\137\2\131\1\134\1\131\5\134\107\0\1\140\1\0"+
    "\1\141\2\0\32\140\6\0\1\140\1\0\3\140\1\0"+
    "\3\140\5\0\4\140\3\0\1\140\3\0\1\140\1\0"+
    "\5\140\12\0\1\142\1\143\32\0\1\144\2\0\1\145"+
    "\35\0\1\146\1\147\1\150\1\151\1\152\1\146\1\140"+
    "\30\20\1\0\1\153\4\0\1\20\1\0\3\20\1\154"+
    "\1\20\1\30\1\31\5\0\4\20\3\0\1\20\3\0"+
    "\1\20\1\0\5\20\1\0\1\146\1\147\1\150\1\151"+
    "\1\152\1\146\1\140\2\20\1\155\25\20\1\0\1\153"+
    "\4\0\1\156\1\0\3\20\1\154\1\20\1\30\1\31"+
    "\5\0\4\20\3\0\1\20\3\0\1\20\1\0\5\20"+
    "\1\0\1\146\1\147\1\150\1\151\1\152\1\146\1\140"+
    "\27\20\1\157\1\0\1\153\4\0\1\20\1\0\3\20"+
    "\1\154\1\20\1\30\1\31\5\0\4\20\3\0\1\20"+
    "\3\0\1\20\1\0\5\20\1\0\1\146\1\147\1\150"+
    "\1\151\1\152\1\146\1\140\11\20\1\160\16\20\1\0"+
    "\1\153\4\0\1\161\1\0\3\20\1\154\1\20\1\30"+
    "\1\31\5\0\1\20\1\162\2\20\3\0\1\20\3\0"+
    "\1\20\1\0\5\20\1\0\1\146\1\147\1\150\1\151"+
    "\1\152\1\146\1\140\27\20\1\163\1\0\1\153\4\0"+
    "\1\20\1\0\3\20\1\154\1\20\1\30\1\31\5\0"+
    "\4\20\3\0\1\20\3\0\1\20\1\0\5\20\43\0"+
    "\1\164\52\0\30\165\6\0\1\165\1\0\3\165\11\0"+
    "\4\165\3\0\1\165\3\0\1\165\1\0\5\165\1\0"+
    "\1\146\1\147\1\150\1\151\1\152\1\146\1\140\2\20"+
    "\1\155\6\20\1\166\16\20\1\0\1\153\4\0\1\20"+
    "\1\0\3\20\1\154\1\20\1\30\1\31\5\0\4\20"+
    "\3\0\1\20\3\0\1\20\1\0\5\20\1\0\1\167"+
    "\1\0\1\170\1\0\1\171\1\167\1\140\30\30\1\0"+
    "\1\172\4\0\1\30\1\0\3\30\1\173\3\30\5\0"+
    "\4\30\3\0\1\30\3\0\1\30\1\0\5\30\1\0"+
    "\1\167\1\147\1\174\1\151\1\152\1\167\1\140\30\31"+
    "\1\0\1\172\4\0\1\31\1\0\3\31\1\173\1\31"+
    "\1\30\1\31\5\0\4\31\3\0\1\31\3\0\1\31"+
    "\1\0\5\31\60\0\1\15\107\0\1\175\24\0\1\146"+
    "\1\147\1\150\1\151\1\152\1\146\1\140\30\20\1\0"+
    "\1\153\4\0\1\176\1\0\3\20\1\154\1\20\1\30"+
    "\1\31\5\0\4\20\3\0\1\20\3\0\1\20\1\0"+
    "\5\20\10\0\30\177\6\0\1\177\1\0\3\177\1\0"+
    "\1\177\1\0\1\177\5\0\2\177\1\200\1\177\3\0"+
    "\1\177\3\0\1\177\1\201\5\177\74\0\1\202\21\0"+
    "\30\203\1\0\1\204\4\0\1\203\1\0\3\203\1\0"+
    "\3\203\5\0\4\203\3\0\1\203\3\0\1\203\1\0"+
    "\5\203\60\0\1\37\110\0\1\205\32\0\30\206\6\0"+
    "\1\206\1\0\3\206\1\0\1\206\1\0\1\206\5\0"+
    "\4\206\3\0\1\206\3\0\1\206\1\201\5\206\74\0"+
    "\1\207\12\0\1\210\1\0\1\211\2\0\32\210\6\0"+
    "\1\210\1\0\3\210\1\0\3\210\5\0\4\210\3\0"+
    "\1\210\3\0\1\210\1\0\5\210\1\0\1\212\1\0"+
    "\1\213\2\0\1\212\1\210\30\47\1\0\1\214\4\0"+
    "\1\47\1\0\3\47\1\215\1\47\2\53\5\0\4\47"+
    "\3\0\1\47\3\0\1\47\1\0\5\47\1\0\1\212"+
    "\1\0\1\213\2\0\1\212\1\210\30\47\1\0\1\214"+
    "\4\0\1\47\1\0\3\47\1\215\1\47\2\53\5\0"+
    "\4\47\3\0\1\47\3\0\1\47\1\0\1\216\4\47"+
    "\1\0\1\212\1\0\1\213\2\0\1\212\1\210\26\47"+
    "\1\217\1\47\1\0\1\214\4\0\1\47\1\0\3\47"+
    "\1\215\1\47\2\53\5\0\4\47\3\0\1\47\3\0"+
    "\1\47\1\0\5\47\1\0\1\212\1\0\1\213\2\0"+
    "\1\212\1\210\30\47\1\0\1\214\4\0\1\47\1\0"+
    "\3\47\1\215\1\47\2\53\5\0\1\47\1\220\2\47"+
    "\3\0\1\47\3\0\1\47\1\0\5\47\1\0\1\221"+
    "\1\0\1\222\2\0\1\221\1\210\30\53\1\0\1\223"+
    "\4\0\1\53\1\0\3\53\1\222\3\53\5\0\4\53"+
    "\3\0\1\53\3\0\1\53\1\0\5\53\63\0\1\224"+
    "\23\0\1\212\1\0\1\213\2\0\1\212\1\210\4\47"+
    "\1\225\23\47\1\0\1\214\4\0\1\47\1\0\3\47"+
    "\1\215\1\47\2\53\5\0\4\47\3\0\1\47\3\0"+
    "\1\47\1\0\5\47\1\0\1\212\1\0\1\213\2\0"+
    "\1\212\1\210\4\47\1\226\23\47\1\0\1\214\4\0"+
    "\1\47\1\0\3\47\1\215\1\47\2\53\5\0\4\47"+
    "\3\0\1\47\3\0\1\47\1\0\5\47\10\0\30\61"+
    "\1\0\1\204\4\0\1\61\1\0\3\61\1\0\3\61"+
    "\5\0\4\61\3\0\1\61\3\0\1\61\1\0\5\61"+
    "\10\0\27\61\1\227\1\0\1\204\4\0\1\61\1\0"+
    "\3\61\1\0\3\61\5\0\4\61\3\0\1\61\3\0"+
    "\1\61\1\0\5\61\2\0\1\230\113\0\30\67\1\0"+
    "\1\204\4\0\1\67\1\0\3\67\1\0\3\67\5\0"+
    "\4\67\3\0\1\67\3\0\1\67\1\0\5\67\60\0"+
    "\1\57\107\0\1\231\33\0\30\72\1\0\1\204\4\0"+
    "\1\72\1\0\3\72\1\0\3\72\5\0\4\72\3\0"+
    "\1\72\3\0\1\72\1\0\5\72\62\0\1\232\33\0"+
    "\30\74\1\0\1\204\4\0\1\74\1\0\3\74\1\0"+
    "\3\74\5\0\4\74\3\0\1\74\3\0\1\74\1\0"+
    "\5\74\10\0\27\74\1\233\1\0\1\204\4\0\1\74"+
    "\1\0\3\74\1\0\3\74\5\0\4\74\3\0\1\74"+
    "\3\0\1\74\1\0\5\74\43\0\1\234\52\0\4\74"+
    "\1\235\23\74\1\0\1\204\4\0\1\74\1\0\3\74"+
    "\1\0\3\74\5\0\4\74\3\0\1\74\3\0\1\74"+
    "\1\0\5\74\10\0\30\74\1\0\1\204\4\0\1\74"+
    "\1\0\3\74\1\0\3\74\5\0\4\74\3\0\1\236"+
    "\3\0\1\74\1\0\5\74\10\0\30\206\1\0\1\237"+
    "\4\0\1\206\1\0\3\206\1\0\1\206\1\0\1\206"+
    "\5\0\4\206\3\0\1\206\3\0\1\206\1\201\5\206"+
    "\75\0\1\205\12\0\1\240\113\0\30\107\1\0\1\204"+
    "\4\0\1\107\1\0\3\107\1\0\3\107\5\0\4\107"+
    "\3\0\1\107\3\0\1\107\1\0\5\107\43\0\1\241"+
    "\122\0\1\104\107\0\1\242\24\0\1\210\1\0\1\211"+
    "\2\0\2\210\30\121\1\0\1\204\4\0\1\121\1\0"+
    "\3\121\1\0\1\121\1\243\1\121\5\0\4\121\3\0"+
    "\1\121\3\0\1\121\1\0\5\121\1\0\1\210\1\0"+
    "\1\211\2\0\2\210\27\121\1\244\1\0\1\204\4\0"+
    "\1\121\1\0\3\121\1\0\1\121\1\243\1\121\5\0"+
    "\4\121\3\0\1\121\3\0\1\121\1\0\5\121\1\0"+
    "\1\210\1\0\1\211\2\0\2\210\30\243\1\0\1\204"+
    "\4\0\1\243\1\0\3\243\1\0\3\243\5\0\4\243"+
    "\3\0\1\243\3\0\1\243\1\0\5\243\60\0\1\116"+
    "\121\0\1\245\106\0\1\246\20\0\30\247\6\0\1\247"+
    "\1\0\3\247\1\0\3\247\3\250\2\0\4\247\3\0"+
    "\1\247\3\0\1\247\1\0\5\247\1\0\1\251\164\0"+
    "\1\131\26\0\1\252\4\0\32\252\6\0\1\252\1\0"+
    "\3\252\1\0\3\252\5\0\4\252\3\0\1\252\3\0"+
    "\1\252\1\0\5\252\37\0\1\253\116\0\1\254\74\0"+
    "\1\255\120\0\1\256\34\0\1\140\1\0\1\141\2\0"+
    "\2\140\30\257\6\0\1\257\1\0\3\257\1\0\1\257"+
    "\2\260\5\0\4\257\3\0\1\257\3\0\1\257\1\0"+
    "\5\257\10\0\30\261\6\0\1\261\1\0\3\261\1\0"+
    "\1\261\1\0\1\261\5\0\4\261\3\0\1\261\3\0"+
    "\1\261\1\0\5\261\1\0\1\252\4\0\2\252\30\262"+
    "\6\0\1\262\1\0\3\262\1\0\1\262\1\263\1\264"+
    "\5\0\4\262\3\0\1\262\3\0\1\262\1\0\5\262"+
    "\10\0\30\265\6\0\1\265\1\0\3\265\1\0\1\265"+
    "\1\0\1\265\5\0\4\265\3\0\1\265\3\0\1\265"+
    "\1\0\5\265\10\0\30\266\6\0\1\266\1\0\3\266"+
    "\1\0\1\266\1\267\1\266\5\0\4\266\3\0\1\266"+
    "\3\0\1\266\1\0\5\266\4\0\1\270\3\0\30\154"+
    "\6\0\1\154\1\0\3\154\1\0\1\154\2\271\5\0"+
    "\4\154\3\0\1\154\3\0\1\154\1\0\5\154\10\0"+
    "\30\154\6\0\1\154\1\0\3\154\1\0\1\154\2\271"+
    "\5\0\4\154\3\0\1\154\3\0\1\154\1\0\5\154"+
    "\1\0\1\146\1\147\1\150\1\151\1\152\1\146\1\140"+
    "\12\20\1\272\15\20\1\0\1\153\4\0\1\20\1\0"+
    "\3\20\1\154\1\20\1\30\1\31\5\0\4\20\3\0"+
    "\1\20\3\0\1\20\1\0\5\20\1\0\1\146\1\147"+
    "\1\150\1\151\1\152\1\146\1\140\11\20\1\273\16\20"+
    "\1\0\1\153\4\0\1\20\1\0\3\20\1\154\1\20"+
    "\1\30\1\31\5\0\4\20\3\0\1\20\3\0\1\20"+
    "\1\0\5\20\1\0\1\146\1\147\1\150\1\151\1\152"+
    "\1\146\1\140\30\20\1\0\1\153\4\0\1\20\1\0"+
    "\3\20\1\154\1\20\1\30\1\31\5\0\3\20\1\274"+
    "\3\0\1\20\3\0\1\20\1\0\5\20\1\0\1\146"+
    "\1\147\1\150\1\151\1\152\1\146\1\140\30\20\1\0"+
    "\1\153\4\0\1\275\1\0\3\20\1\154\1\20\1\30"+
    "\1\31\5\0\4\20\3\0\1\20\3\0\1\20\1\0"+
    "\5\20\1\0\1\146\1\147\1\150\1\151\1\152\1\146"+
    "\1\140\30\20\1\0\1\153\4\0\1\20\1\0\3\20"+
    "\1\154\1\20\1\30\1\31\5\0\1\276\3\20\3\0"+
    "\1\20\3\0\1\20\1\0\5\20\1\0\1\146\1\147"+
    "\1\150\1\151\1\152\1\146\1\140\30\20\1\0\1\153"+
    "\4\0\1\277\1\0\3\20\1\154\1\20\1\30\1\31"+
    "\5\0\4\20\3\0\1\20\3\0\1\20\1\0\5\20"+
    "\1\0\1\146\1\147\1\150\1\151\1\152\1\146\1\140"+
    "\27\20\1\300\1\0\1\153\4\0\1\20\1\0\3\20"+
    "\1\154\1\20\1\30\1\31\5\0\4\20\3\0\1\20"+
    "\3\0\1\20\1\0\5\20\43\0\1\301\52\0\30\165"+
    "\6\0\1\165\1\0\3\165\4\0\3\302\1\303\1\0"+
    "\4\165\3\0\1\165\3\0\1\165\1\0\5\165\1\0"+
    "\1\146\1\147\1\150\1\151\1\152\1\146\1\140\30\20"+
    "\1\0\1\153\4\0\1\20\1\0\3\20\1\154\1\20"+
    "\1\30\1\31\5\0\2\20\1\304\1\20\3\0\1\20"+
    "\3\0\1\20\1\0\5\20\1\0\1\140\1\0\1\141"+
    "\2\0\2\140\30\305\6\0\1\305\1\0\3\305\1\0"+
    "\1\305\2\306\5\0\4\305\3\0\1\305\3\0\1\305"+
    "\1\0\5\305\1\0\1\252\4\0\2\252\30\307\6\0"+
    "\1\307\1\0\3\307\1\0\1\307\2\310\5\0\4\307"+
    "\3\0\1\307\3\0\1\307\1\0\5\307\10\0\30\267"+
    "\6\0\1\267\1\0\3\267\1\0\3\267\5\0\4\267"+
    "\3\0\1\267\3\0\1\267\1\0\5\267\4\0\1\270"+
    "\3\0\30\311\6\0\1\311\1\0\3\311\1\0\1\311"+
    "\2\312\5\0\4\311\3\0\1\311\3\0\1\311\1\0"+
    "\5\311\10\0\30\311\6\0\1\311\1\0\3\311\1\0"+
    "\1\311\2\312\5\0\4\311\3\0\1\311\3\0\1\311"+
    "\1\0\5\311\1\0\1\252\4\0\2\252\30\313\6\0"+
    "\1\313\1\0\3\313\1\0\1\313\1\310\1\314\5\0"+
    "\4\313\3\0\1\313\3\0\1\313\1\0\5\313\35\0"+
    "\1\315\2\0\1\316\46\0\1\146\1\147\1\150\1\151"+
    "\1\152\1\146\1\140\4\20\1\317\23\20\1\0\1\153"+
    "\4\0\1\20\1\0\3\20\1\154\1\20\1\30\1\31"+
    "\5\0\4\20\3\0\1\20\3\0\1\20\1\0\5\20"+
    "\10\320\30\177\1\320\1\321\4\320\1\177\1\320\3\177"+
    "\1\320\1\177\1\320\1\177\1\322\1\323\1\322\2\320"+
    "\4\177\1\324\1\320\1\325\1\177\3\320\1\177\1\320"+
    "\5\177\10\320\30\177\1\320\1\321\4\320\1\177\1\320"+
    "\3\177\1\320\1\177\1\320\1\177\1\322\1\323\1\322"+
    "\2\320\1\177\1\326\2\177\1\324\1\320\1\325\1\177"+
    "\3\320\1\177\1\320\5\177\1\0\1\327\120\0\1\330"+
    "\12\0\1\330\62\0\1\270\101\0\60\206\1\0\7\206"+
    "\1\331\15\206\10\0\1\332\1\333\1\334\3\0\1\335"+
    "\1\0\1\336\2\0\1\337\1\340\1\341\3\0\1\342"+
    "\1\0\1\343\53\0\1\210\1\0\1\211\2\0\2\210"+
    "\30\212\6\0\1\212\1\0\3\212\1\0\1\212\2\344"+
    "\5\0\4\212\3\0\1\212\3\0\1\212\1\0\5\212"+
    "\10\0\1\345\1\346\1\347\3\215\1\350\1\215\1\351"+
    "\2\215\1\352\1\353\1\354\3\215\1\355\1\215\1\356"+
    "\4\215\6\0\1\215\1\0\3\215\1\0\1\215\2\357"+
    "\5\0\4\215\3\0\1\215\3\0\1\215\1\0\5\215"+
    "\4\0\1\270\3\0\30\215\6\0\1\215\1\0\3\215"+
    "\1\0\1\215\2\357\5\0\4\215\3\0\1\215\3\0"+
    "\1\215\1\0\5\215\10\0\30\215\6\0\1\215\1\0"+
    "\3\215\1\0\1\215\2\357\5\0\4\215\3\0\1\215"+
    "\3\0\1\215\1\0\5\215\1\0\1\212\1\0\1\213"+
    "\2\0\1\212\1\210\30\47\1\0\1\214\4\0\1\47"+
    "\1\0\3\47\1\215\1\47\2\53\5\0\1\360\3\47"+
    "\3\0\1\47\3\0\1\47\1\0\5\47\1\0\1\212"+
    "\1\0\1\213\2\0\1\212\1\210\30\47\1\0\1\214"+
    "\4\0\1\47\1\0\2\47\1\361\1\215\1\47\2\53"+
    "\5\0\4\47\3\0\1\47\3\0\1\47\1\0\5\47"+
    "\1\0\1\212\1\0\1\213\2\0\1\212\1\210\5\47"+
    "\1\362\22\47\1\0\1\214\4\0\1\47\1\0\3\47"+
    "\1\215\1\47\2\53\5\0\4\47\3\0\1\47\3\0"+
    "\1\47\1\0\5\47\1\0\1\210\1\0\1\211\2\0"+
    "\2\210\30\363\6\0\1\363\1\0\3\363\1\0\1\363"+
    "\2\364\5\0\4\363\3\0\1\363\3\0\1\363\1\0"+
    "\5\363\10\0\30\365\6\0\1\365\1\0\3\365\1\0"+
    "\1\365\2\366\5\0\4\365\3\0\1\365\3\0\1\365"+
    "\1\0\5\365\4\0\1\270\3\0\30\365\6\0\1\365"+
    "\1\0\3\365\1\0\1\365\2\366\5\0\4\365\3\0"+
    "\1\365\3\0\1\365\1\0\5\365\1\0\1\212\1\0"+
    "\1\213\2\0\1\212\1\210\2\47\1\367\25\47\1\0"+
    "\1\214\4\0\1\47\1\0\3\47\1\215\1\47\2\53"+
    "\5\0\4\47\3\0\1\47\3\0\1\47\1\0\5\47"+
    "\1\0\1\212\1\0\1\213\2\0\1\212\1\210\10\47"+
    "\1\370\17\47\1\0\1\214\4\0\1\47\1\0\3\47"+
    "\1\215\1\47\2\53\5\0\4\47\3\0\1\47\3\0"+
    "\1\47\1\0\5\47\10\0\27\61\1\371\1\0\1\204"+
    "\4\0\1\61\1\0\3\61\1\0\3\61\5\0\4\61"+
    "\3\0\1\61\3\0\1\61\1\0\5\61\2\0\1\372"+
    "\140\0\1\373\2\0\1\374\55\0\27\74\1\375\1\0"+
    "\1\204\4\0\1\74\1\0\3\74\1\0\3\74\5\0"+
    "\4\74\3\0\1\74\3\0\1\74\1\0\5\74\43\0"+
    "\1\376\52\0\3\74\1\377\24\74\1\0\1\204\4\0"+
    "\1\74\1\0\3\74\1\0\3\74\5\0\4\74\3\0"+
    "\1\74\3\0\1\74\1\0\5\74\10\0\27\74\1\u0100"+
    "\1\0\1\204\4\0\1\74\1\0\3\74\1\0\3\74"+
    "\5\0\4\74\3\0\1\74\3\0\1\74\1\0\5\74"+
    "\66\0\1\u0101\21\0\1\u0102\146\0\1\u0103\77\0\1\u0104"+
    "\2\0\1\u0105\46\0\1\210\1\0\1\211\2\0\2\210"+
    "\27\121\1\u0106\1\0\1\204\4\0\1\121\1\0\3\121"+
    "\1\0\1\121\1\243\1\121\5\0\4\121\3\0\1\121"+
    "\3\0\1\121\1\0\5\121\14\u0107\1\u0108\12\u0107\1\u0108"+
    "\30\u0107\1\0\25\u0107\10\0\30\247\3\0\1\131\2\0"+
    "\1\247\1\0\3\247\1\0\3\247\3\u0109\2\0\4\247"+
    "\3\0\1\247\3\0\1\247\1\0\5\247\72\0\1\63"+
    "\14\0\1\252\1\0\1\141\2\0\32\252\6\0\1\252"+
    "\1\0\3\252\1\0\3\252\5\0\4\252\3\0\1\252"+
    "\3\0\1\252\1\0\5\252\47\0\1\131\54\0\1\u010a"+
    "\136\0\1\u010b\57\0\1\142\65\0\1\u010c\1\0\1\u010d"+
    "\1\0\1\171\1\u010c\1\140\30\257\6\0\1\257\1\0"+
    "\3\257\1\0\1\257\2\260\5\0\4\257\3\0\1\257"+
    "\3\0\1\257\1\0\5\257\1\0\1\u010e\1\0\1\u010f"+
    "\1\0\1\171\1\u010e\1\140\30\260\1\0\1\u0110\4\0"+
    "\1\260\1\0\3\260\1\u0110\3\260\5\0\4\260\3\0"+
    "\1\260\3\0\1\260\1\0\5\260\2\0\1\147\5\0"+
    "\30\261\6\0\1\261\1\0\3\261\1\0\1\261\1\0"+
    "\1\261\5\0\4\261\3\0\1\261\3\0\1\261\1\0"+
    "\5\261\1\0\1\u0111\1\0\1\u0112\1\0\1\171\1\u0111"+
    "\1\252\30\262\6\0\1\262\1\0\3\262\1\0\1\262"+
    "\1\263\1\264\5\0\4\262\3\0\1\262\3\0\1\262"+
    "\1\0\5\262\1\0\1\u0113\1\0\1\u010f\1\0\1\171"+
    "\1\u0113\1\252\30\263\1\0\1\u0110\4\0\1\263\1\0"+
    "\3\263\1\u0110\3\263\5\0\4\263\3\0\1\263\3\0"+
    "\1\263\1\0\5\263\1\0\1\u0113\1\0\1\u0114\1\0"+
    "\1\171\1\u0113\1\252\30\264\1\0\1\u0110\4\0\1\264"+
    "\1\0\3\264\1\u0110\1\264\1\263\1\264\5\0\4\264"+
    "\3\0\1\264\3\0\1\264\1\0\5\264\1\0\1\u0115"+
    "\1\0\1\u0115\4\0\30\266\6\0\1\266\1\0\3\266"+
    "\1\0\1\266\1\267\1\266\5\0\4\266\3\0\1\266"+
    "\3\0\1\266\1\0\5\266\1\0\1\u0115\1\0\1\u0115"+
    "\4\0\30\267\6\0\1\267\1\0\3\267\1\0\3\267"+
    "\5\0\4\267\3\0\1\267\3\0\1\267\1\0\5\267"+
    "\12\0\1\142\74\0\1\u0110\1\0\1\u0110\2\0\1\u0110"+
    "\1\0\30\271\1\0\1\u0110\4\0\1\271\1\0\3\271"+
    "\1\u0110\3\271\5\0\4\271\3\0\1\271\3\0\1\271"+
    "\1\0\5\271\1\0\1\146\1\147\1\150\1\151\1\152"+
    "\1\146\1\140\11\20\1\u0116\16\20\1\0\1\153\4\0"+
    "\1\20\1\0\3\20\1\154\1\20\1\30\1\31\5\0"+
    "\4\20\3\0\1\20\3\0\1\20\1\0\5\20\1\0"+
    "\1\146\1\147\1\150\1\151\1\152\1\146\1\140\30\20"+
    "\1\0\1\153\4\0\1\20\1\0\3\20\1\154\1\20"+
    "\1\30\1\31\5\0\1\u0117\3\20\3\0\1\20\3\0"+
    "\1\20\1\0\5\20\1\0\1\146\1\147\1\150\1\151"+
    "\1\152\1\146\1\140\30\20\1\0\1\153\4\0\1\u0118"+
    "\1\0\3\20\1\154\1\20\1\30\1\31\5\0\4\20"+
    "\3\0\1\20\3\0\1\20\1\0\5\20\1\0\1\146"+
    "\1\147\1\150\1\151\1\152\1\146\1\140\6\20\1\u0119"+
    "\21\20\1\0\1\153\4\0\1\20\1\0\3\20\1\154"+
    "\1\20\1\30\1\31\5\0\4\20\3\0\1\20\3\0"+
    "\1\20\1\0\5\20\1\0\1\146\1\147\1\150\1\151"+
    "\1\152\1\146\1\140\6\20\1\u011a\21\20\1\0\1\153"+
    "\4\0\1\20\1\0\3\20\1\154\1\20\1\30\1\31"+
    "\5\0\4\20\3\0\1\20\3\0\1\20\1\0\5\20"+
    "\1\0\1\146\1\147\1\150\1\151\1\152\1\146\1\140"+
    "\30\20\1\0\1\153\4\0\1\u011b\1\0\3\20\1\154"+
    "\1\20\1\30\1\31\5\0\4\20\3\0\1\20\3\0"+
    "\1\20\1\0\5\20\1\0\1\146\1\147\1\150\1\151"+
    "\1\152\1\146\1\140\1\20\1\u011c\26\20\1\0\1\153"+
    "\4\0\1\20\1\0\3\20\1\154\1\20\1\30\1\31"+
    "\5\0\4\20\3\0\1\20\3\0\1\20\1\0\5\20"+
    "\43\0\1\u011d\121\0\3\302\1\303\105\0\1\u011e\24\0"+
    "\1\146\1\147\1\150\1\151\1\152\1\146\1\140\10\20"+
    "\1\u011f\17\20\1\0\1\153\4\0\1\20\1\0\3\20"+
    "\1\154\1\20\1\30\1\31\5\0\4\20\3\0\1\20"+
    "\3\0\1\20\1\0\5\20\1\0\1\146\1\0\1\u0120"+
    "\1\0\1\171\1\146\1\140\30\305\1\0\1\154\4\0"+
    "\1\305\1\0\3\305\1\154\1\305\2\306\5\0\4\305"+
    "\3\0\1\305\3\0\1\305\1\0\5\305\1\0\1\167"+
    "\1\0\1\170\1\0\1\171\1\167\1\140\30\306\1\0"+
    "\1\173\4\0\1\306\1\0\3\306\1\173\3\306\5\0"+
    "\4\306\3\0\1\306\3\0\1\306\1\0\5\306\1\0"+
    "\1\u0121\1\0\1\u0120\1\0\1\171\1\u0121\1\252\30\307"+
    "\1\0\1\154\4\0\1\307\1\0\3\307\1\154\1\307"+
    "\2\310\5\0\4\307\3\0\1\307\3\0\1\307\1\0"+
    "\5\307\1\0\1\u0122\1\0\1\170\1\0\1\171\1\u0122"+
    "\1\252\30\310\1\0\1\173\4\0\1\310\1\0\3\310"+
    "\1\173\3\310\5\0\4\310\3\0\1\310\3\0\1\310"+
    "\1\0\5\310\1\0\1\154\1\0\1\154\2\0\1\154"+
    "\1\0\30\311\1\0\1\154\4\0\1\311\1\0\3\311"+
    "\1\154\1\311\2\312\5\0\4\311\3\0\1\311\3\0"+
    "\1\311\1\0\5\311\1\0\1\173\1\0\1\173\2\0"+
    "\1\173\1\0\30\312\1\0\1\173\4\0\1\312\1\0"+
    "\3\312\1\173\3\312\5\0\4\312\3\0\1\312\3\0"+
    "\1\312\1\0\5\312\1\0\1\u0121\1\0\1\u0123\1\0"+
    "\1\171\1\u0121\1\252\30\313\1\0\1\154\4\0\1\313"+
    "\1\0\3\313\1\154\1\313\1\310\1\314\5\0\4\313"+
    "\3\0\1\313\3\0\1\313\1\0\5\313\1\0\1\u0122"+
    "\1\0\1\u0124\1\0\1\171\1\u0122\1\252\30\314\1\0"+
    "\1\173\4\0\1\314\1\0\3\314\1\173\1\314\1\310"+
    "\1\314\5\0\4\314\3\0\1\314\3\0\1\314\1\0"+
    "\5\314\64\0\1\u0125\56\0\1\315\51\0\1\146\1\147"+
    "\1\150\1\151\1\152\1\146\1\140\2\20\1\u0126\25\20"+
    "\1\0\1\153\4\0\1\20\1\0\3\20\1\154\1\20"+
    "\1\30\1\31\5\0\4\20\3\0\1\20\3\0\1\20"+
    "\1\0\5\20\60\320\1\0\7\320\1\324\75\320\1\0"+
    "\7\320\1\324\1\320\1\325\54\320\1\321\15\320\1\322"+
    "\1\323\1\322\6\320\1\324\15\320\41\0\1\u0127\15\0"+
    "\3\323\24\0\41\320\1\u0128\16\320\1\0\7\320\1\324"+
    "\25\320\5\177\1\u0129\22\177\1\320\1\321\4\320\1\177"+
    "\1\320\3\177\1\320\1\177\1\320\1\177\1\322\1\323"+
    "\1\322\2\320\4\177\1\324\1\320\1\325\1\177\3\320"+
    "\1\177\1\320\5\177\1\0\1\u012a\117\0\1\u012b\72\0"+
    "\41\206\1\u012c\16\206\1\0\7\206\1\331\15\206\11\0"+
    "\1\u012d\107\0\1\u012d\2\0\1\131\1\0\1\u012e\101\0"+
    "\1\u012e\110\0\1\u012d\107\0\1\u012f\110\0\1\u0130\107\0"+
    "\1\u0130\2\0\1\131\1\0\1\u0131\101\0\1\u0131\110\0"+
    "\1\u0130\107\0\1\u0132\52\0\1\u0133\1\0\1\u0134\2\0"+
    "\1\u0133\1\210\30\344\1\0\1\u0134\4\0\1\344\1\0"+
    "\3\344\1\u0134\3\344\5\0\4\344\3\0\1\344\3\0"+
    "\1\344\1\0\5\344\10\0\1\215\1\u0135\26\215\6\0"+
    "\1\215\1\0\3\215\1\0\1\215\2\357\5\0\4\215"+
    "\3\0\1\215\3\0\1\215\1\0\5\215\10\0\3\215"+
    "\1\u0135\2\215\1\u0136\1\215\1\u0137\17\215\6\0\1\215"+
    "\1\0\3\215\1\0\1\215\2\357\5\0\4\215\3\0"+
    "\1\215\3\0\1\215\1\0\5\215\10\0\4\215\1\u0137"+
    "\23\215\6\0\1\215\1\0\3\215\1\0\1\215\2\357"+
    "\5\0\4\215\3\0\1\215\3\0\1\215\1\0\5\215"+
    "\10\0\7\215\1\u0135\20\215\6\0\1\215\1\0\3\215"+
    "\1\0\1\215\2\357\5\0\4\215\3\0\1\215\3\0"+
    "\1\215\1\0\5\215\10\0\11\215\1\u0138\16\215\6\0"+
    "\1\215\1\0\3\215\1\0\1\215\2\357\5\0\4\215"+
    "\3\0\1\215\3\0\1\215\1\0\5\215\10\0\14\215"+
    "\1\u0139\13\215\6\0\1\215\1\0\3\215\1\0\1\215"+
    "\2\357\5\0\4\215\3\0\1\215\3\0\1\215\1\0"+
    "\5\215\10\0\16\215\1\u0139\2\215\1\u0136\1\215\1\u013a"+
    "\4\215\6\0\1\215\1\0\3\215\1\0\1\215\2\357"+
    "\5\0\4\215\3\0\1\215\3\0\1\215\1\0\5\215"+
    "\10\0\17\215\1\u013a\10\215\6\0\1\215\1\0\3\215"+
    "\1\0\1\215\2\357\5\0\4\215\3\0\1\215\3\0"+
    "\1\215\1\0\5\215\10\0\22\215\1\u0139\5\215\6\0"+
    "\1\215\1\0\3\215\1\0\1\215\2\357\5\0\4\215"+
    "\3\0\1\215\3\0\1\215\1\0\5\215\10\0\24\215"+
    "\1\u013b\3\215\6\0\1\215\1\0\3\215\1\0\1\215"+
    "\2\357\5\0\4\215\3\0\1\215\3\0\1\215\1\0"+
    "\5\215\1\0\1\u0134\1\0\1\u0134\2\0\1\u0134\1\0"+
    "\30\357\1\0\1\u0134\4\0\1\357\1\0\3\357\1\u0134"+
    "\3\357\5\0\4\357\3\0\1\357\3\0\1\357\1\0"+
    "\5\357\1\0\1\212\1\0\1\213\2\0\1\212\1\210"+
    "\2\47\1\u013c\25\47\1\0\1\214\4\0\1\47\1\0"+
    "\3\47\1\215\1\47\2\53\5\0\4\47\3\0\1\47"+
    "\3\0\1\47\1\0\5\47\1\0\1\212\1\0\1\213"+
    "\2\0\1\212\1\210\30\47\1\0\1\214\4\0\1\47"+
    "\1\0\3\47\1\215\1\47\2\53\5\0\4\47\3\0"+
    "\1\47\3\0\1\47\1\0\1\u013d\4\47\1\0\1\212"+
    "\1\0\1\213\2\0\1\212\1\210\27\47\1\u013e\1\0"+
    "\1\214\4\0\1\47\1\0\3\47\1\215\1\47\2\53"+
    "\5\0\4\47\3\0\1\47\3\0\1\47\1\0\5\47"+
    "\1\0\1\212\1\0\1\213\2\0\1\212\1\210\30\363"+
    "\1\0\1\215\4\0\1\363\1\0\3\363\1\215\1\363"+
    "\2\364\5\0\4\363\3\0\1\363\3\0\1\363\1\0"+
    "\5\363\1\0\1\221\1\0\1\222\2\0\1\221\1\210"+
    "\30\364\1\0\1\222\4\0\1\364\1\0\3\364\1\222"+
    "\3\364\5\0\4\364\3\0\1\364\3\0\1\364\1\0"+
    "\5\364\1\0\1\215\1\0\1\215\2\0\1\215\1\0"+
    "\30\365\1\0\1\215\4\0\1\365\1\0\3\365\1\215"+
    "\1\365\2\366\5\0\4\365\3\0\1\365\3\0\1\365"+
    "\1\0\5\365\1\0\1\222\1\0\1\222\2\0\1\222"+
    "\1\0\30\366\1\0\1\222\4\0\1\366\1\0\3\366"+
    "\1\222\3\366\5\0\4\366\3\0\1\366\3\0\1\366"+
    "\1\0\5\366\1\0\1\212\1\0\1\213\2\0\1\212"+
    "\1\210\26\47\1\362\1\47\1\0\1\214\4\0\1\47"+
    "\1\0\3\47\1\215\1\47\2\53\5\0\4\47\3\0"+
    "\1\47\3\0\1\47\1\0\5\47\1\0\1\212\1\0"+
    "\1\213\2\0\1\212\1\210\27\47\1\u013f\1\0\1\214"+
    "\4\0\1\47\1\0\3\47\1\215\1\47\2\53\5\0"+
    "\4\47\3\0\1\47\3\0\1\47\1\0\5\47\10\0"+
    "\1\61\1\u0140\26\61\1\0\1\204\4\0\1\61\1\0"+
    "\3\61\1\0\3\61\5\0\4\61\3\0\1\61\3\0"+
    "\1\61\1\0\5\61\64\0\1\u0141\56\0\1\373\60\0"+
    "\1\74\1\u0142\26\74\1\0\1\204\4\0\1\74\1\0"+
    "\3\74\1\0\3\74\5\0\4\74\3\0\1\74\3\0"+
    "\1\74\1\0\5\74\43\0\1\u0143\52\0\30\74\1\0"+
    "\1\204\4\0\1\74\1\0\3\74\1\0\3\74\5\0"+
    "\4\74\3\0\1\74\3\0\1\74\1\0\4\74\1\u0144"+
    "\10\0\30\74\1\0\1\204\4\0\1\74\1\0\3\74"+
    "\1\0\3\74\5\0\1\74\1\u0145\2\74\3\0\1\74"+
    "\3\0\1\74\1\0\5\74\65\0\1\u0146\22\0\1\u0147"+
    "\167\0\1\u0148\56\0\1\u0104\51\0\1\210\1\0\1\211"+
    "\2\0\2\210\1\121\1\u0149\26\121\1\0\1\204\4\0"+
    "\1\121\1\0\3\121\1\0\1\121\1\243\1\121\5\0"+
    "\4\121\3\0\1\121\3\0\1\121\1\0\5\121\60\u0107"+
    "\1\0\14\u0107\1\u014a\23\u0107\1\u014b\44\u0107\1\0\14\u0107"+
    "\1\u014a\10\u0107\43\0\1\131\13\0\3\u0109\35\0\1\253"+
    "\104\0\30\u010b\6\0\1\u010b\1\0\3\u010b\1\0\3\u010b"+
    "\5\0\4\u010b\3\0\1\u010b\3\0\1\u010b\1\0\5\u010b"+
    "\1\0\1\140\1\0\1\141\2\0\2\140\30\u014c\6\0"+
    "\1\u014c\1\0\3\u014c\1\0\3\u014c\5\0\4\u014c\3\0"+
    "\1\u014c\3\0\1\u014c\1\0\5\u014c\1\0\1\252\4\0"+
    "\2\252\30\u014d\6\0\1\u014d\1\0\3\u014d\1\0\3\u014d"+
    "\5\0\4\u014d\3\0\1\u014d\3\0\1\u014d\1\0\5\u014d"+
    "\1\0\1\140\1\0\1\141\2\0\2\140\30\u014e\6\0"+
    "\1\u014e\1\0\3\u014e\1\0\3\u014e\5\0\4\u014e\3\0"+
    "\1\u014e\3\0\1\u014e\1\0\5\u014e\1\0\1\252\4\0"+
    "\2\252\30\u014f\6\0\1\u014f\1\0\3\u014f\1\0\3\u014f"+
    "\5\0\4\u014f\3\0\1\u014f\3\0\1\u014f\1\0\5\u014f"+
    "\10\0\30\u0150\6\0\1\u0150\1\0\3\u0150\1\0\3\u0150"+
    "\5\0\4\u0150\3\0\1\u0150\3\0\1\u0150\1\0\5\u0150"+
    "\1\0\1\252\1\0\1\141\2\0\2\252\30\u014d\6\0"+
    "\1\u014d\1\0\3\u014d\1\0\3\u014d\5\0\4\u014d\3\0"+
    "\1\u014d\3\0\1\u014d\1\0\5\u014d\1\0\1\252\4\0"+
    "\2\252\30\u0151\6\0\1\u0151\1\0\3\u0151\1\0\1\u0151"+
    "\1\u014d\1\u0151\5\0\4\u0151\3\0\1\u0151\3\0\1\u0151"+
    "\1\0\5\u0151\1\0\1\252\1\0\1\141\2\0\2\252"+
    "\30\u014f\6\0\1\u014f\1\0\3\u014f\1\0\3\u014f\5\0"+
    "\4\u014f\3\0\1\u014f\3\0\1\u014f\1\0\5\u014f\1\0"+
    "\1\252\4\0\2\252\30\u0152\6\0\1\u0152\1\0\3\u0152"+
    "\1\0\1\u0152\1\u014f\1\u0152\5\0\4\u0152\3\0\1\u0152"+
    "\3\0\1\u0152\1\0\5\u0152\10\0\30\u0153\6\0\1\u0153"+
    "\1\0\3\u0153\1\0\3\u0153\5\0\4\u0153\3\0\1\u0153"+
    "\3\0\1\u0153\1\0\5\u0153\1\0\1\146\1\147\1\150"+
    "\1\151\1\152\1\146\1\140\30\20\1\0\1\153\4\0"+
    "\1\u0154\1\0\3\20\1\154\1\20\1\30\1\31\5\0"+
    "\4\20\3\0\1\20\3\0\1\20\1\0\5\20\1\0"+
    "\1\146\1\147\1\150\1\151\1\152\1\146\1\140\27\20"+
    "\1\u0155\1\0\1\153\4\0\1\20\1\0\3\20\1\154"+
    "\1\20\1\30\1\31\5\0\4\20\3\0\1\20\3\0"+
    "\1\20\1\0\5\20\1\0\1\146\1\147\1\150\1\151"+
    "\1\152\1\146\1\140\30\20\1\0\1\153\4\0\1\20"+
    "\1\0\3\20\1\154\1\20\1\30\1\31\5\0\1\20"+
    "\1\u0156\2\20\3\0\1\20\3\0\1\20\1\0\5\20"+
    "\1\0\1\146\1\147\1\150\1\151\1\152\1\146\1\140"+
    "\1\20\1\u0157\26\20\1\0\1\153\4\0\1\20\1\0"+
    "\3\20\1\154\1\20\1\30\1\31\5\0\4\20\3\0"+
    "\1\20\3\0\1\20\1\0\5\20\1\0\1\146\1\147"+
    "\1\150\1\151\1\152\1\146\1\140\6\20\1\u0155\21\20"+
    "\1\0\1\153\4\0\1\20\1\0\3\20\1\154\1\20"+
    "\1\30\1\31\5\0\4\20\3\0\1\20\3\0\1\20"+
    "\1\0\5\20\1\0\1\146\1\147\1\150\1\151\1\152"+
    "\1\146\1\140\1\20\1\u0158\4\20\1\u0159\21\20\1\0"+
    "\1\153\4\0\1\20\1\0\3\20\1\154\1\20\1\30"+
    "\1\31\5\0\4\20\3\0\1\20\3\0\1\20\1\0"+
    "\5\20\1\0\1\146\1\147\1\150\1\151\1\152\1\146"+
    "\1\140\6\20\1\u015a\21\20\1\u015b\1\153\4\0\1\20"+
    "\1\0\3\20\1\154\1\20\1\30\1\31\5\0\4\20"+
    "\3\0\1\20\3\0\1\20\1\0\5\20\43\0\1\u015c"+
    "\42\0\57\u015d\2\0\25\u015d\1\0\1\146\1\147\1\150"+
    "\1\151\1\152\1\146\1\140\30\20\1\0\1\153\4\0"+
    "\1\20\1\0\3\20\1\154\1\20\1\30\1\31\5\0"+
    "\1\20\1\u015e\2\20\3\0\1\20\3\0\1\20\1\0"+
    "\5\20\1\0\1\252\4\0\2\252\30\u015f\6\0\1\u015f"+
    "\1\0\3\u015f\1\0\1\u015f\2\263\5\0\4\u015f\3\0"+
    "\1\u015f\3\0\1\u015f\1\0\5\u015f\1\0\1\252\1\0"+
    "\1\141\2\0\2\252\30\u015f\6\0\1\u015f\1\0\3\u015f"+
    "\1\0\1\u015f\2\263\5\0\4\u015f\3\0\1\u015f\3\0"+
    "\1\u015f\1\0\5\u015f\1\0\1\252\1\0\1\141\2\0"+
    "\2\252\30\307\6\0\1\307\1\0\3\307\1\0\1\307"+
    "\2\310\5\0\4\307\3\0\1\307\3\0\1\307\1\0"+
    "\5\307\37\0\1\u0160\47\0\1\146\1\147\1\150\1\151"+
    "\1\152\1\146\1\140\3\20\1\u0155\24\20\1\0\1\153"+
    "\4\0\1\20\1\0\3\20\1\154\1\20\1\30\1\31"+
    "\5\0\4\20\3\0\1\20\3\0\1\20\1\0\5\20"+
    "\72\0\1\131\13\0\10\320\30\u0161\6\320\1\u0161\1\320"+
    "\3\u0161\1\320\1\u0161\1\320\1\u0161\1\320\1\0\3\320"+
    "\4\u0161\1\324\2\320\1\u0161\3\320\1\u0161\1\320\5\u0161"+
    "\10\320\30\u0162\1\320\1\321\4\320\1\u0162\1\320\3\u0162"+
    "\1\320\1\u0162\1\u0163\1\u0162\1\u0164\1\u0165\1\u0164\2\320"+
    "\4\u0162\1\324\1\320\1\325\1\u0162\3\320\1\u0162\1\320"+
    "\5\u0162\15\0\1\u0166\70\0\10\206\30\u0167\6\206\1\u0167"+
    "\1\206\3\u0167\1\206\1\u0167\1\206\1\u0167\1\206\1\0"+
    "\3\206\4\u0167\1\331\2\206\1\u0167\3\206\1\u0167\1\206"+
    "\5\u0167\12\0\1\131\110\0\1\131\112\0\1\131\110\0"+
    "\1\131\110\0\1\131\112\0\1\131\51\0\1\210\1\0"+
    "\1\211\2\0\2\210\30\u0168\6\0\1\u0168\1\0\3\u0168"+
    "\1\0\3\u0168\5\0\4\u0168\3\0\1\u0168\3\0\1\u0168"+
    "\1\0\5\u0168\10\0\30\u0169\6\0\1\u0169\1\0\3\u0169"+
    "\1\0\3\u0169\5\0\4\u0169\3\0\1\u0169\3\0\1\u0169"+
    "\1\0\5\u0169\10\0\2\215\1\u0136\25\215\6\0\1\215"+
    "\1\0\3\215\1\0\1\215\2\357\5\0\4\215\3\0"+
    "\1\215\3\0\1\215\1\0\5\215\10\0\5\215\1\u0136"+
    "\22\215\6\0\1\215\1\0\3\215\1\0\1\215\2\357"+
    "\5\0\4\215\3\0\1\215\3\0\1\215\1\0\5\215"+
    "\10\0\12\215\1\u0136\15\215\6\0\1\215\1\0\3\215"+
    "\1\0\1\215\2\357\5\0\4\215\3\0\1\215\3\0"+
    "\1\215\1\0\5\215\10\0\15\215\1\u0136\12\215\6\0"+
    "\1\215\1\0\3\215\1\0\1\215\2\357\5\0\4\215"+
    "\3\0\1\215\3\0\1\215\1\0\5\215\10\0\20\215"+
    "\1\u0136\7\215\6\0\1\215\1\0\3\215\1\0\1\215"+
    "\2\357\5\0\4\215\3\0\1\215\3\0\1\215\1\0"+
    "\5\215\10\0\25\215\1\u0136\2\215\6\0\1\215\1\0"+
    "\3\215\1\0\1\215\2\357\5\0\4\215\3\0\1\215"+
    "\3\0\1\215\1\0\5\215\1\0\1\212\1\0\1\213"+
    "\2\0\1\212\1\210\30\47\1\0\1\214\4\0\1\47"+
    "\1\0\3\47\1\215\1\47\2\53\5\0\1\47\1\u016a"+
    "\2\47\3\0\1\47\3\0\1\47\1\0\5\47\1\0"+
    "\1\212\1\0\1\213\2\0\1\212\1\210\30\47\1\0"+
    "\1\214\4\0\1\47\1\0\1\u013e\2\47\1\215\1\47"+
    "\2\53\5\0\4\47\3\0\1\47\3\0\1\47\1\0"+
    "\5\47\1\0\1\212\1\0\1\213\2\0\1\212\1\210"+
    "\26\47\1\u016b\1\47\1\0\1\214\4\0\1\47\1\0"+
    "\3\47\1\215\1\47\2\53\5\0\4\47\3\0\1\47"+
    "\3\0\1\47\1\0\5\47\10\0\6\61\1\u016c\21\61"+
    "\1\u016d\1\204\4\0\1\61\1\0\3\61\1\0\3\61"+
    "\5\0\4\61\3\0\1\61\3\0\1\61\1\0\5\61"+
    "\37\0\1\u016e\56\0\6\74\1\u016f\21\74\1\u0170\1\204"+
    "\4\0\1\74\1\0\3\74\1\0\3\74\5\0\4\74"+
    "\3\0\1\74\3\0\1\74\1\0\5\74\43\0\1\205"+
    "\52\0\6\74\1\u0171\21\74\1\0\1\204\4\0\1\74"+
    "\1\0\3\74\1\0\3\74\5\0\4\74\3\0\1\74"+
    "\3\0\1\74\1\0\5\74\10\0\30\74\1\0\1\204"+
    "\4\0\1\74\1\0\3\74\1\0\3\74\5\0\2\74"+
    "\1\u0172\1\74\3\0\1\74\3\0\1\74\1\0\5\74"+
    "\15\0\1\u0173\72\0\1\u0174\142\0\1\u0175\47\0\1\210"+
    "\1\0\1\211\2\0\2\210\6\121\1\u0176\21\121\1\u0170"+
    "\1\204\4\0\1\121\1\0\3\121\1\0\1\121\1\243"+
    "\1\121\5\0\4\121\3\0\1\121\3\0\1\121\1\0"+
    "\5\121\60\u0107\1\0\14\u0107\1\u0177\25\u0107\1\u0178\42\u0107"+
    "\1\0\14\u0107\1\u014a\10\u0107\1\0\1\u010c\1\0\1\u010d"+
    "\1\0\1\171\1\u010c\1\140\30\u014c\6\0\1\u014c\1\0"+
    "\3\u014c\1\0\3\u014c\5\0\4\u014c\3\0\1\u014c\3\0"+
    "\1\u014c\1\0\5\u014c\1\0\1\u0111\1\0\1\u010d\1\0"+
    "\1\171\1\u0111\1\252\30\u014d\6\0\1\u014d\1\0\3\u014d"+
    "\1\0\3\u014d\5\0\4\u014d\3\0\1\u014d\3\0\1\u014d"+
    "\1\0\5\u014d\1\0\1\146\1\0\1\u0120\1\0\1\171"+
    "\1\146\1\140\30\u014e\1\0\1\154\4\0\1\u014e\1\0"+
    "\3\u014e\1\154\3\u014e\5\0\4\u014e\3\0\1\u014e\3\0"+
    "\1\u014e\1\0\5\u014e\1\0\1\u0121\1\0\1\u0120\1\0"+
    "\1\171\1\u0121\1\252\30\u014f\1\0\1\154\4\0\1\u014f"+
    "\1\0\3\u014f\1\154\3\u014f\5\0\4\u014f\3\0\1\u014f"+
    "\3\0\1\u014f\1\0\5\u014f\1\0\1\154\1\0\1\154"+
    "\2\0\1\154\1\0\30\u0150\1\0\1\154\4\0\1\u0150"+
    "\1\0\3\u0150\1\154\3\u0150\5\0\4\u0150\3\0\1\u0150"+
    "\3\0\1\u0150\1\0\5\u0150\1\0\1\u0111\1\0\1\u0112"+
    "\1\0\1\171\1\u0111\1\252\30\u0151\6\0\1\u0151\1\0"+
    "\3\u0151\1\0\1\u0151\1\u014d\1\u0151\5\0\4\u0151\3\0"+
    "\1\u0151\3\0\1\u0151\1\0\5\u0151\1\0\1\u0121\1\0"+
    "\1\u0123\1\0\1\171\1\u0121\1\252\30\u0152\1\0\1\154"+
    "\4\0\1\u0152\1\0\3\u0152\1\154\1\u0152\1\u014f\1\u0152"+
    "\5\0\4\u0152\3\0\1\u0152\3\0\1\u0152\1\0\5\u0152"+
    "\1\0\1\u0115\1\0\1\u0115\4\0\30\u0153\6\0\1\u0153"+
    "\1\0\3\u0153\1\0\3\u0153\5\0\4\u0153\3\0\1\u0153"+
    "\3\0\1\u0153\1\0\5\u0153\1\0\1\146\1\147\1\150"+
    "\1\151\1\152\1\146\1\140\11\20\1\u015e\16\20\1\0"+
    "\1\153\4\0\1\20\1\0\3\20\1\154\1\20\1\30"+
    "\1\31\5\0\4\20\3\0\1\20\3\0\1\20\1\0"+
    "\5\20\1\0\1\146\1\147\1\150\1\151\1\152\1\146"+
    "\1\140\30\20\1\0\1\153\1\0\1\u0179\2\0\1\20"+
    "\1\0\3\20\1\154\1\20\1\30\1\31\5\0\4\20"+
    "\3\0\1\20\3\0\1\20\1\0\5\20\1\0\1\146"+
    "\1\147\1\150\1\151\1\152\1\146\1\140\30\20\1\0"+
    "\1\153\1\0\1\u017a\2\0\1\20\1\0\3\20\1\154"+
    "\1\20\1\30\1\31\3\u017b\2\0\4\20\3\0\1\20"+
    "\3\0\1\20\1\0\5\20\1\0\1\146\1\147\1\150"+
    "\1\151\1\152\1\146\1\140\30\20\1\0\1\153\4\0"+
    "\1\20\1\0\3\20\1\154\1\20\1\30\1\31\5\0"+
    "\1\u0126\3\20\3\0\1\20\3\0\1\20\1\0\5\20"+
    "\1\0\1\146\1\147\1\150\1\151\1\152\1\146\1\140"+
    "\30\20\1\0\1\153\4\0\1\20\1\0\3\20\1\154"+
    "\1\20\1\30\1\31\5\0\1\u017c\3\20\3\0\1\20"+
    "\3\0\1\20\1\0\5\20\1\0\1\146\1\147\1\150"+
    "\1\151\1\152\1\146\1\140\1\20\1\u017d\26\20\1\0"+
    "\1\153\4\0\1\20\1\0\3\20\1\154\1\20\1\30"+
    "\1\31\5\0\4\20\3\0\1\20\3\0\1\20\1\0"+
    "\5\20\1\0\1\146\1\147\1\150\1\151\1\152\1\146"+
    "\1\140\30\20\1\u015b\1\153\4\0\1\20\1\0\3\20"+
    "\1\154\1\20\1\30\1\31\5\0\4\20\3\0\1\20"+
    "\3\0\1\20\1\0\5\20\41\0\1\u017e\44\0\57\u015d"+
    "\2\0\2\u015d\1\u017f\22\u015d\1\0\1\146\1\147\1\150"+
    "\1\151\1\152\1\146\1\140\30\20\1\0\1\153\4\0"+
    "\1\20\1\0\3\20\1\154\1\20\1\30\1\31\5\0"+
    "\2\20\1\u0155\1\20\3\0\1\20\3\0\1\20\1\0"+
    "\5\20\1\0\1\u0111\1\0\1\u010d\1\0\1\171\1\u0111"+
    "\1\252\30\u015f\6\0\1\u015f\1\0\3\u015f\1\0\1\u015f"+
    "\2\263\5\0\4\u015f\3\0\1\u015f\3\0\1\u015f\1\0"+
    "\5\u015f\65\0\1\u0180\20\0\10\320\30\u0161\6\320\1\u0161"+
    "\1\320\3\u0161\1\320\1\u0161\1\320\1\u0161\1\320\1\0"+
    "\3\320\4\u0161\1\324\1\320\1\325\1\u0161\3\320\1\u0161"+
    "\1\320\5\u0161\10\320\30\u0162\1\320\1\321\1\320\1\u0181"+
    "\2\320\1\u0162\1\320\3\u0162\1\320\1\u0162\1\u0163\1\u0162"+
    "\1\322\1\323\1\322\2\320\4\u0162\1\324\1\320\1\325"+
    "\1\u0162\3\320\1\u0162\1\320\5\u0162\10\320\30\u0163\3\320"+
    "\1\u0181\2\320\1\u0163\1\320\3\u0163\1\320\3\u0163\1\320"+
    "\1\0\3\320\4\u0163\1\324\2\320\1\u0163\3\320\1\u0163"+
    "\1\320\5\u0163\10\320\30\u0163\1\320\1\321\4\320\1\u0163"+
    "\1\320\3\u0163\1\320\3\u0163\1\u0164\1\u0165\1\u0164\2\320"+
    "\4\u0163\1\324\2\320\1\u0163\3\320\1\u0163\1\320\5\u0163"+
    "\10\0\30\u0182\1\0\1\u0127\4\0\1\u0182\1\0\3\u0182"+
    "\1\0\3\u0182\3\u0165\2\0\4\u0182\3\0\1\u0182\3\0"+
    "\1\u0182\1\0\5\u0182\21\0\1\u0183\64\0\10\206\30\u0167"+
    "\6\206\1\u0167\1\206\3\u0167\1\206\1\u0167\1\206\1\u0167"+
    "\1\206\1\0\3\206\4\u0167\1\331\1\206\1\u0184\1\u0167"+
    "\3\206\1\u0167\1\206\5\u0167\1\0\1\212\1\0\1\213"+
    "\2\0\1\212\1\210\30\u0168\1\0\1\215\4\0\1\u0168"+
    "\1\0\3\u0168\1\215\3\u0168\5\0\4\u0168\3\0\1\u0168"+
    "\3\0\1\u0168\1\0\5\u0168\1\0\1\215\1\0\1\215"+
    "\2\0\1\215\1\0\30\u0169\1\0\1\215\4\0\1\u0169"+
    "\1\0\3\u0169\1\215\3\u0169\5\0\4\u0169\3\0\1\u0169"+
    "\3\0\1\u0169\1\0\5\u0169\1\0\1\212\1\0\1\213"+
    "\2\0\1\212\1\210\30\47\1\131\1\214\4\0\1\47"+
    "\1\0\3\47\1\215\1\47\2\53\5\0\4\47\3\0"+
    "\1\47\3\0\1\47\1\0\5\47\1\0\1\212\1\0"+
    "\1\213\2\0\1\212\1\210\1\47\1\u0185\26\47\1\0"+
    "\1\214\4\0\1\47\1\0\3\47\1\215\1\47\2\53"+
    "\5\0\4\47\3\0\1\47\3\0\1\47\1\0\5\47"+
    "\10\0\30\61\1\u016d\1\204\4\0\1\61\1\0\3\61"+
    "\1\0\3\61\5\0\4\61\3\0\1\61\3\0\1\61"+
    "\1\0\5\61\41\0\1\u0186\131\0\1\u0187\30\0\30\74"+
    "\1\u0170\1\204\4\0\1\74\1\0\3\74\1\0\3\74"+
    "\5\0\4\74\3\0\1\74\3\0\1\74\1\0\5\74"+
    "\41\0\1\u0188\54\0\3\74\1\u0189\24\74\1\0\1\204"+
    "\4\0\1\74\1\0\3\74\1\0\3\74\5\0\4\74"+
    "\3\0\1\74\3\0\1\74\1\0\5\74\72\0\1\205"+
    "\100\0\1\u018a\21\0\1\210\1\0\1\211\2\0\2\210"+
    "\30\121\1\u0170\1\204\4\0\1\121\1\0\3\121\1\0"+
    "\1\121\1\243\1\121\5\0\4\121\3\0\1\121\3\0"+
    "\1\121\1\0\5\121\21\u0107\1\u018b\36\u0107\1\0\14\u0107"+
    "\1\u014a\10\u0107\1\0\1\u018c\2\0\1\u018c\3\0\31\u018c"+
    "\3\0\7\u018c\1\0\3\u018c\5\0\4\u018c\1\0\1\u018c"+
    "\1\0\1\u018c\3\0\1\u018c\1\0\5\u018c\57\0\3\u017a"+
    "\7\0\1\u018d\57\0\1\u017a\13\0\3\u017b\25\0\1\146"+
    "\1\147\1\150\1\151\1\152\1\146\1\140\10\20\1\u018e"+
    "\17\20\1\0\1\153\4\0\1\20\1\0\3\20\1\154"+
    "\1\20\1\30\1\31\5\0\4\20\3\0\1\20\3\0"+
    "\1\20\1\0\5\20\1\0\1\146\1\147\1\150\1\151"+
    "\1\152\1\146\1\140\30\20\1\0\1\153\4\0\1\20"+
    "\1\0\3\20\1\154\1\20\1\30\1\31\5\0\1\u018f"+
    "\3\20\3\0\1\20\3\0\1\20\1\0\5\20\41\0"+
    "\1\u0190\44\0\57\u015d\2\0\2\u015d\1\u0191\22\u015d\12\0"+
    "\1\u0192\73\0\10\320\30\u0193\6\320\1\u0193\1\320\3\u0193"+
    "\1\320\3\u0193\1\320\1\0\3\320\4\u0193\1\324\1\u0194"+
    "\1\320\1\u0193\3\320\1\u0193\1\320\5\u0193\10\0\30\u0182"+
    "\3\0\1\u0195\2\0\1\u0182\1\0\3\u0182\1\0\3\u0182"+
    "\5\0\4\u0182\3\0\1\u0182\3\0\1\u0182\1\0\5\u0182"+
    "\50\0\1\u0196\36\0\1\212\1\0\1\213\2\0\1\212"+
    "\1\210\30\47\1\0\1\214\4\0\1\47\1\0\3\47"+
    "\1\215\1\47\2\53\5\0\4\47\3\0\1\u013e\3\0"+
    "\1\47\1\0\5\47\41\0\1\u0197\56\0\1\u0198\134\0"+
    "\1\u0199\54\0\30\74\1\0\1\204\4\0\1\74\1\0"+
    "\3\74\1\0\3\74\5\0\1\u019a\3\74\3\0\1\74"+
    "\3\0\1\74\1\0\5\74\12\0\1\u019b\73\0\50\u0107"+
    "\1\u019c\7\u0107\1\0\14\u0107\1\u014a\10\u0107\60\u019d\1\0"+
    "\25\u019d\1\0\1\146\1\147\1\150\1\151\1\152\1\146"+
    "\1\140\10\20\1\u019e\17\20\1\0\1\153\4\0\1\20"+
    "\1\0\3\20\1\154\1\20\1\30\1\31\5\0\4\20"+
    "\3\0\1\20\3\0\1\20\1\0\5\20\1\0\1\146"+
    "\1\147\1\150\1\151\1\152\1\146\1\140\12\20\1\u019e"+
    "\15\20\1\0\1\153\4\0\1\20\1\0\3\20\1\154"+
    "\1\20\1\30\1\31\5\0\4\20\3\0\1\20\3\0"+
    "\1\20\1\0\5\20\1\0\1\u019f\4\0\32\u019f\6\0"+
    "\1\u019f\1\0\3\u019f\1\0\3\u019f\5\0\4\u019f\3\0"+
    "\1\u019f\3\0\1\u019f\1\0\5\u019f\57\u015d\2\u01a0\1\u01a1"+
    "\1\u015d\1\u0191\10\u015d\1\u01a2\11\u015d\21\0\1\u01a3\64\0"+
    "\10\320\30\u01a4\6\320\1\u01a4\1\320\3\u01a4\1\320\3\u01a4"+
    "\1\u01a5\1\u01a6\1\u01a5\2\320\4\u01a4\1\324\1\u01a7\1\u01a8"+
    "\1\u01a4\3\320\1\u01a4\1\320\5\u01a4\10\320\30\u0193\6\320"+
    "\1\u0193\1\320\3\u0193\1\320\3\u0193\1\320\1\0\3\320"+
    "\4\u0193\1\324\2\320\1\u0193\3\320\1\u0193\1\320\5\u0193"+
    "\10\0\30\u01a9\6\0\1\u01a9\1\0\3\u01a9\1\0\3\u01a9"+
    "\5\0\4\u01a9\1\0\1\u01aa\1\0\1\u01a9\3\0\1\u01a9"+
    "\1\0\5\u01a9\21\0\1\u01ab\65\0\1\u01ac\4\0\32\u01ac"+
    "\6\0\1\u01ac\1\0\3\u01ac\1\0\3\u01ac\5\0\4\u01ac"+
    "\3\0\1\u01ac\3\0\1\u01ac\1\0\5\u01ac\21\0\1\u01ad"+
    "\65\0\1\u01ae\4\0\32\u01ae\6\0\1\u01ae\1\0\3\u01ae"+
    "\1\0\3\u01ae\5\0\4\u01ae\3\0\1\u01ae\3\0\1\u01ae"+
    "\1\0\5\u01ae\10\0\30\74\1\0\1\204\4\0\1\u0171"+
    "\1\0\3\74\1\0\3\74\5\0\4\74\3\0\1\74"+
    "\3\0\1\74\1\0\5\74\21\0\1\u01af\64\0\21\u0107"+
    "\1\u01b0\36\u0107\1\0\14\u0107\1\u014a\10\u0107\60\u019d\1\0"+
    "\10\u019d\1\u01b1\14\u019d\1\0\1\146\1\147\1\150\1\151"+
    "\1\152\1\146\1\140\4\20\1\u01b2\23\20\1\0\1\153"+
    "\4\0\1\20\1\0\3\20\1\154\1\20\1\30\1\31"+
    "\5\0\4\20\3\0\1\20\3\0\1\20\1\0\5\20"+
    "\1\0\1\u019f\1\0\1\u01b3\2\0\32\u019f\6\0\1\u019f"+
    "\1\0\3\u019f\1\0\3\u019f\5\0\4\u019f\3\0\1\u019f"+
    "\3\0\1\u019f\1\0\5\u019f\57\0\3\u01a0\12\0\1\u01b4"+
    "\11\0\57\u015d\2\u01a0\1\u01a1\1\u015d\1\u017f\10\u015d\1\u01a2"+
    "\70\u015d\2\0\2\u015d\1\u017f\10\u015d\1\u01b5\11\u015d\66\0"+
    "\1\u01b6\17\0\10\320\30\u01a4\3\320\1\u0181\2\320\1\u01a4"+
    "\1\320\3\u01a4\1\320\3\u01a4\1\u01a5\1\u01a6\1\u01a5\2\320"+
    "\4\u01a4\1\324\1\u01a7\1\u01a8\1\u01a4\3\320\1\u01a4\1\320"+
    "\5\u01a4\10\320\30\u0163\6\320\1\u0163\1\320\3\u0163\1\320"+
    "\3\u0163\1\u01a5\1\u01a6\1\u01a5\2\320\4\u0163\1\324\2\320"+
    "\1\u0163\3\320\1\u0163\1\320\5\u0163\10\0\30\u0182\6\0"+
    "\1\u0182\1\0\3\u0182\1\0\3\u0182\3\u01a6\2\0\4\u0182"+
    "\3\0\1\u0182\3\0\1\u0182\1\0\5\u0182\10\320\30\u0163"+
    "\6\320\1\u0163\1\320\3\u0163\1\320\3\u0163\1\u01a5\1\u01a6"+
    "\1\u01a5\2\320\4\u0163\1\324\1\320\1\u01a8\1\u0163\3\320"+
    "\1\u0163\1\320\5\u0163\10\0\30\u01b7\6\0\1\u01b7\1\0"+
    "\3\u01b7\1\0\3\u01b7\3\u01a6\2\0\4\u01b7\1\0\1\u01b8"+
    "\1\u01b9\1\u01b7\3\0\1\u01b7\1\0\5\u01b7\10\0\30\u01a9"+
    "\6\0\1\u01a9\1\0\3\u01a9\1\0\3\u01a9\5\0\4\u01a9"+
    "\3\0\1\u01a9\3\0\1\u01a9\1\0\5\u01a9\73\0\1\u01ba"+
    "\13\0\1\u01ac\1\0\1\u01bb\2\0\32\u01ac\6\0\1\u01ac"+
    "\1\0\3\u01ac\1\0\3\u01ac\5\0\4\u01ac\3\0\1\u01ac"+
    "\3\0\1\u01ac\1\0\5\u01ac\66\0\1\u01bc\20\0\1\u01ae"+
    "\1\0\1\u01bd\2\0\32\u01ae\6\0\1\u01ae\1\0\3\u01ae"+
    "\1\0\3\u01ae\5\0\4\u01ae\3\0\1\u01ae\3\0\1\u01ae"+
    "\1\0\5\u01ae\66\0\1\u01be\17\0\60\u0107\1\0\12\u0107"+
    "\1\u01bf\1\u0107\1\u014a\10\u0107\1\0\1\146\1\147\1\150"+
    "\1\151\1\152\1\146\1\140\3\20\1\u01c0\24\20\1\0"+
    "\1\153\4\0\1\20\1\0\3\20\1\154\1\20\1\30"+
    "\1\31\5\0\4\20\3\0\1\20\3\0\1\20\1\0"+
    "\5\20\1\0\1\u01c1\4\0\32\u01c1\6\0\1\u01c1\1\0"+
    "\3\u01c1\1\0\3\u01c1\5\0\4\u01c1\3\0\1\u01c1\3\0"+
    "\1\u01c1\1\0\5\u01c1\74\0\1\u01c2\11\0\57\u01c3\2\0"+
    "\2\u01c3\1\u01c4\22\u01c3\67\0\1\u01c5\26\0\30\u01b7\3\0"+
    "\1\u0195\2\0\1\u01b7\1\0\3\u01b7\1\0\3\u01b7\3\u01a6"+
    "\2\0\4\u01b7\1\0\1\u01b8\1\u01b9\1\u01b7\3\0\1\u01b7"+
    "\1\0\5\u01b7\10\0\30\u0182\6\0\1\u0182\1\0\3\u0182"+
    "\1\0\3\u0182\3\u01a6\2\0\4\u0182\2\0\1\u01b9\1\u0182"+
    "\3\0\1\u0182\1\0\5\u0182\1\0\1\u01c6\4\0\32\u01c6"+
    "\6\0\1\u01c6\1\0\3\u01c6\1\0\3\u01c6\5\0\4\u01c6"+
    "\3\0\1\u01c6\3\0\1\u01c6\1\0\5\u01c6\67\0\1\u01c7"+
    "\17\0\1\u01c8\4\0\32\u01c8\6\0\1\u01c8\1\0\3\u01c8"+
    "\1\0\3\u01c8\5\0\4\u01c8\3\0\1\u01c8\3\0\1\u01c8"+
    "\1\0\5\u01c8\67\0\1\u01c9\17\0\1\146\1\147\1\150"+
    "\1\151\1\152\1\146\1\140\2\20\1\u0155\25\20\1\0"+
    "\1\153\4\0\1\20\1\0\3\20\1\154\1\20\1\30"+
    "\1\31\5\0\4\20\3\0\1\20\3\0\1\20\1\0"+
    "\5\20\1\0\1\u01c1\1\0\2\u01c1\1\0\32\u01c1\1\0"+
    "\6\u01c1\1\0\7\u01c1\5\0\4\u01c1\3\0\1\u01c1\3\0"+
    "\1\u01c1\1\0\5\u01c1\57\u01ca\2\0\25\u01ca\57\u01c3\2\0"+
    "\2\u01c3\1\u01c4\11\u01c3\1\u01cb\67\u01c3\2\0\2\u01c3\1\u01cc"+
    "\11\u01c3\1\u01cb\10\u01c3\40\0\1\u01cd\46\0\1\u01c6\1\0"+
    "\2\u01c6\1\0\32\u01c6\1\0\6\u01c6\1\0\7\u01c6\5\0"+
    "\4\u01c6\3\0\1\u01c6\3\0\1\u01c6\1\0\5\u01c6\40\0"+
    "\1\u01ce\46\0\1\u01c8\1\0\2\u01c8\1\0\32\u01c8\1\0"+
    "\6\u01c8\1\0\7\u01c8\5\0\4\u01c8\3\0\1\u01c8\3\0"+
    "\1\u01c8\1\0\5\u01c8\40\0\1\u01cf\45\0\57\u01ca\2\0"+
    "\14\u01ca\1\u01d0\10\u01ca\57\u01c3\2\0\2\u01c3\1\u01c4\11\u01c3"+
    "\1\u01d1\67\u01c3\2\u01a0\1\u01d2\1\u01c3\1\u01cc\11\u01c3\1\u01cb"+
    "\10\u01c3\57\u01ca\2\0\14\u01ca\1\u01d3\10\u01ca\57\u01c3\2\u01a0"+
    "\1\u01d2\1\u01c3\1\u01c4\11\u01c3\1\u01cb\10\u01c3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28700];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\1\11\21\1\1\11\17\1\1\11\3\1\1\11"+
    "\20\1\1\11\10\1\2\11\12\1\1\11\6\1\15\0"+
    "\10\1\1\0\1\1\6\0\2\1\3\0\1\1\2\0"+
    "\1\11\10\0\3\1\3\0\1\11\3\1\1\0\6\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\11"+
    "\3\0\1\1\5\0\7\1\2\0\11\1\2\0\11\1"+
    "\2\0\1\1\5\0\1\1\16\0\1\1\12\0\13\1"+
    "\1\11\2\0\4\1\1\0\1\1\1\11\2\0\1\1"+
    "\4\0\1\1\5\0\4\1\1\0\10\1\1\0\1\1"+
    "\1\0\4\1\1\0\1\1\3\0\1\11\13\0\1\1"+
    "\5\0\5\1\1\0\4\1\3\0\1\1\3\0\16\1"+
    "\1\0\1\11\1\0\2\1\10\0\5\1\2\0\1\1"+
    "\1\0\2\1\1\0\1\11\1\0\2\1\4\0\2\1"+
    "\6\0\2\1\3\0\1\1\2\0\1\1\1\0\2\1"+
    "\1\0\1\1\10\0\1\1\3\0\1\1\1\0\2\1"+
    "\6\0\1\1\10\0\2\1\6\0\2\11\4\0\3\1"+
    "\4\0\1\1\1\0\1\1\3\0\1\1\3\11\1\0"+
    "\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[467];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

public static final int ALPHANUM          = CustomWikipediaTokenizer.ALPHANUM_ID;
public static final int APOSTROPHE        = CustomWikipediaTokenizer.APOSTROPHE_ID;
public static final int ACRONYM           = CustomWikipediaTokenizer.ACRONYM_ID;
public static final int COMPANY           = CustomWikipediaTokenizer.COMPANY_ID;
public static final int EMAIL             = CustomWikipediaTokenizer.EMAIL_ID;
public static final int HOST              = CustomWikipediaTokenizer.HOST_ID;
public static final int NUM               = CustomWikipediaTokenizer.NUM_ID;
public static final int CJ                = CustomWikipediaTokenizer.CJ_ID;
public static final int INTERNAL_LINK     = CustomWikipediaTokenizer.INTERNAL_LINK_ID;
public static final int EXTERNAL_LINK     = CustomWikipediaTokenizer.EXTERNAL_LINK_ID;
public static final int CITATION          = CustomWikipediaTokenizer.CITATION_ID;
public static final int CATEGORY          = CustomWikipediaTokenizer.CATEGORY_ID;
public static final int BOLD              = CustomWikipediaTokenizer.BOLD_ID;
public static final int ITALICS           = CustomWikipediaTokenizer.ITALICS_ID;
public static final int BOLD_ITALICS      = CustomWikipediaTokenizer.BOLD_ITALICS_ID;
public static final int HEADING           = CustomWikipediaTokenizer.HEADING_ID;
public static final int SUB_HEADING       = CustomWikipediaTokenizer.SUB_HEADING_ID;
public static final int EXTERNAL_LINK_URL = CustomWikipediaTokenizer.EXTERNAL_LINK_URL_ID;


private int currentTokType;
private int numBalanced = 0;
private int positionInc = 1;
private int numLinkToks = 0;
//Anytime we start a new on a Wiki reserved token (category, link, etc.) this value will be 0, otherwise it will be the number of tokens seen
//this can be useful for detecting when a new reserved token is encountered
//see https://issues.apache.org/jira/browse/LUCENE-1133
private int numWikiTokensSeen = 0;

public static final String [] TOKEN_TYPES = CustomWikipediaTokenizer.TOKEN_TYPES;

/**
Returns the number of tokens seen inside a category or link, etc.
@return the number of tokens seen inside the context of wiki syntax.
**/
public final int getNumWikiTokensSeen(){
  return numWikiTokensSeen;
}

public final int yychar()
{
    return yychar;
}

public final int getPositionIncrement(){
  return positionInc;
}

/**
 * Fills Lucene token with the current token text.
 */
final void getText(Token t) {
  t.setTermBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
}

final int setText(StringBuffer buffer){
  int length = zzMarkedPos - zzStartRead;
  buffer.append(zzBuffer, zzStartRead, length);
  return length;
}

private void dbg(String msg) {
	System.err.println(">>>> DBG >>> " + msg + ", state:[" + yystate() + "], yytext:[" + yytext() +"]");
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CustomWikipediaTokenizerImpl(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CustomWikipediaTokenizerImpl(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 242) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { /* ignore */
          }
        case 50: break;
        case 26: 
          { currentTokType = INTERNAL_LINK; numWikiTokensSeen = 0; yybegin(INTERNAL_LINK_STATE);
          }
        case 51: break;
        case 28: 
          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end italics*/
          }
        case 52: break;
        case 8: 
          { numLinkToks = 0; positionInc = 0; yybegin(YYINITIAL);
          }
        case 53: break;
        case 41: 
          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end bold italics*/
          }
        case 54: break;
        case 5: 
          { yybegin(INTERNAL_LINK_STATE); numWikiTokensSeen++; return currentTokType;
          }
        case 55: break;
        case 21: 
          { numWikiTokensSeen = 0; positionInc = 1; yybegin(DOUBLE_EQUALS_STATE);
          }
        case 56: break;
        case 37: 
          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end sub header*/
          }
        case 57: break;
        case 43: 
          { /* dbg("attr"); */
          }
        case 58: break;
        case 45: 
          { positionInc = 1; numWikiTokensSeen++; currentTokType = EXTERNAL_LINK_URL; return currentTokType;
          }
        case 59: break;
        case 44: 
          { numWikiTokensSeen = 0; positionInc = 1; currentTokType = ALPHANUM; yybegin(INFOBOX_STATE);
          }
        case 60: break;
        case 22: 
          { numWikiTokensSeen = 0; positionInc = 1; currentTokType = INTERNAL_LINK; yybegin(INTERNAL_LINK_STATE);
          }
        case 61: break;
        case 12: 
          { yybegin(STRING); numWikiTokensSeen++; return currentTokType;
          }
        case 62: break;
        case 4: 
          { positionInc = 1;
          }
        case 63: break;
        case 47: 
          { numWikiTokensSeen = 0; positionInc = 1; currentTokType = CATEGORY; yybegin(CATEGORY_STATE);
          }
        case 64: break;
        case 24: 
          { yybegin(YYINITIAL);
          }
        case 65: break;
        case 19: 
          { positionInc = 1; return currentTokType;
          }
        case 66: break;
        case 16: 
          { numBalanced = 0; numWikiTokensSeen = 0; currentTokType = EXTERNAL_LINK;yybegin(EXTERNAL_LINK_STATE);
          }
        case 67: break;
        case 1: 
          { numWikiTokensSeen = 0;  positionInc = 1;
          }
        case 68: break;
        case 13: 
          { positionInc = 1; numWikiTokensSeen++; return currentTokType;
          }
        case 69: break;
        case 40: 
          { positionInc = 1; return EMAIL;
          }
        case 70: break;
        case 10: 
          { dbg("alphanum"); currentTokType = ITALICS; numWikiTokensSeen++;  yybegin(STRING); return currentTokType;/*italics*/
          }
        case 71: break;
        case 23: 
          { numWikiTokensSeen = 0; positionInc = 1; currentTokType = CITATION; yybegin(DOUBLE_BRACE_STATE);
          }
        case 72: break;
        case 18: 
          { /* dbg("ignoring " +yytext() + " in state " + yystate()); */ positionInc = 1;
          }
        case 73: break;
        case 38: 
          { positionInc = 1; return ACRONYM;
          }
        case 74: break;
        case 7: 
          { if (numLinkToks == 0){positionInc = 0;} else{positionInc = 1;} numWikiTokensSeen++; currentTokType = EXTERNAL_LINK; yybegin(EXTERNAL_LINK_STATE); numLinkToks++; return currentTokType;
          }
        case 75: break;
        case 29: 
          { numBalanced = 0; numWikiTokensSeen = 0; currentTokType = INTERNAL_LINK;yybegin(INTERNAL_LINK_STATE);
          }
        case 76: break;
        case 14: 
          { /* ignore STRING */
          }
        case 77: break;
        case 46: 
          { positionInc = 1; numWikiTokensSeen++; yybegin(EXTERNAL_LINK_STATE); return currentTokType;
          }
        case 78: break;
        case 17: 
          { yybegin(STRING); return currentTokType;/*pipe*/
          }
        case 79: break;
        case 36: 
          { numBalanced = 0;currentTokType = ALPHANUM;yybegin(YYINITIAL);/*end bold*/
          }
        case 80: break;
        case 39: 
          { numWikiTokensSeen = 0; positionInc = 1; currentTokType = ALPHANUM; yybegin(XML_COMMENT_STATE);
          }
        case 81: break;
        case 31: 
          { positionInc = 1; return HOST;
          }
        case 82: break;
        case 49: 
          { numBalanced = 0; numWikiTokensSeen = 0; currentTokType = CATEGORY;yybegin(CATEGORY_STATE);
          }
        case 83: break;
        case 35: 
          { currentTokType = BOLD_ITALICS;  yybegin(FIVE_SINGLE_QUOTES_STATE);
          }
        case 84: break;
        case 30: 
          { /* dbg("quitting infobox "); */ numLinkToks = 0; yybegin(YYINITIAL);
          }
        case 85: break;
        case 11: 
          { currentTokType = EXTERNAL_LINK; numWikiTokensSeen = 0; yybegin(EXTERNAL_LINK_STATE);
          }
        case 86: break;
        case 42: 
          { /* dbg("ignoring internal braces " + yytext()); */
          }
        case 87: break;
        case 33: 
          { positionInc = 1; return APOSTROPHE;
          }
        case 88: break;
        case 15: 
          { yybegin(STRING); numWikiTokensSeen++; return currentTokType;/* STRING ALPHANUM*/
          }
        case 89: break;
        case 32: 
          { positionInc = 1; return NUM;
          }
        case 90: break;
        case 48: 
          { currentTokType = CATEGORY; numWikiTokensSeen = 0; yybegin(CATEGORY_STATE);
          }
        case 91: break;
        case 2: 
          { positionInc = 1; return ALPHANUM;
          }
        case 92: break;
        case 34: 
          { positionInc = 1; return COMPANY;
          }
        case 93: break;
        case 9: 
          { currentTokType = BOLD;  yybegin(THREE_SINGLE_QUOTES_STATE);
          }
        case 94: break;
        case 27: 
          { currentTokType = INTERNAL_LINK; numWikiTokensSeen = 0;  yybegin(INTERNAL_LINK_STATE);
          }
        case 95: break;
        case 3: 
          { numWikiTokensSeen = 0; positionInc = 1; currentTokType = EXTERNAL_LINK_URL; yybegin(EXTERNAL_LINK_STATE);
          }
        case 96: break;
        case 25: 
          { numLinkToks = 0; yybegin(YYINITIAL);
          }
        case 97: break;
        case 20: 
          { 
          }
        case 98: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
