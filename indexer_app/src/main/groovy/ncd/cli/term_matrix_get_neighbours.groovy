package ncd.cliimport inform.dist.DistanceCalculatorimport matrix.store.TermMatrixReadOnlyif ((args.length) < 2) {    println "usage ${this.class} matrix-location term"    return}matrix_dir = args[0]term = args[1]matrix_dir = matrix_dir.replace("~", System.properties['user.home'])def mtx = new TermMatrixReadOnly(new File(matrix_dir))//println mtx.terms[0..<100]//println mtx.getCombinedComplexity('name', 'one')int c1 = mtx.getComplexity(term)println "C($term) = $c1 "String[] terms = mtx.termsint[] row = mtx.getCombinedComplexityRow(term)List<List<Object>> ncd_neighbours = new ArrayList<>()List<List<Object>> uncd_neighbours = new ArrayList<>()row.eachWithIndex { int entry, int i ->    def cc = entry    String t2 = mtx.getTerm(i)    def c2 = mtx.getComplexity(t2)    def ncd = DistanceCalculator.getNormalizedDistance(c1, c2, cc)    def uncd = DistanceCalculator.getUnnormalizedDistance(c1, c2, cc)    ncd_neighbours  << [t2, ncd]    uncd_neighbours << [t2, uncd]//    println "C($t2) = $c2; CC($term,$t2) = $cc, NCD($term, $t2) = $ncd, UNCD($term, $t2) = $uncd"}def comparator_dbl = new Comparator<List>() {    @Override    int compare(List o1, List o2) {        double d1 = (double) o1[1]        double d2 = (double) o2[1]        final double diff = (d1 - d2)//        println "${o1[0] - o2[0]} d1 = $d1, d2 = $d2, res = $res"        int res        if (diff < 0) res = -1        else if (diff > 0) res = 1        else res = 0        return res;    }}ncd_neighbours.sort(comparator_dbl)//uncd_neighbours.sort(comparator)println "[$term] nearest neighbours:"println "==" * 2000ncd_neighbours[0..50].each {    println ("${it[0]} - ${it[1]}")}println "==" * 2000//println ncd_neighbours.findAll { it[0] == 'turk'}println mtx.getCombinedComplexity('ottoman', 'turk')//println uncd_map