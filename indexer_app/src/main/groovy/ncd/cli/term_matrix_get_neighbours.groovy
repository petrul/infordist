package ncd.cliimport inform.dist.DistanceCalculatorimport matrix.store.TermMatrixReadOnlyif ((args.length) < 2) {    println "usage ${this.class} matrix-location term"    return}matrix_dir = args[0]term = args[1]println termdef mtx = new TermMatrixReadOnly(new File(matrix_dir))//println mtx.terms[0..<100]//println mtx.getCombinedComplexity('name', 'one')int c1 = mtx.getComplexity(term)println "C($term) = $c1 "int[] row = mtx.getCombinedComplexityRow(term)def ncd_map = [:]def uncd_map = [:]row.eachWithIndex { int entry, int i ->    def cc = entry    String t2 = mtx.getTerm(i)    def c2 = mtx.getComplexity(t2)    def ncd = DistanceCalculator.getNormalizedDistance(c1, c2, cc)    def uncd = DistanceCalculator.getUnnormalizedDistance(c1, c2, cc)    ncd_map[t2] = ncd    uncd_map[t2] = uncd    println "C($t2) = $c2; CC($term,$t2) = $cc, NCD($term, $t2) = $ncd, UNCD($term, $t2) = $uncd"}println ncd_mapprintln "==" * 2000println uncd_map