plugins {
    id 'java'
    id 'groovy'
    id 'maven-publish'
    id 'application'
    id 'eclipse'
    id 'maven'
}


String xmxArg = "-Xmx2500m"
startScripts {
    mainClassName = "wiki.indexer.cli.WikipediaIndexer"
    applicationName = "wikipedia-indexer"
    applicationDefaultJvmArgs  = [xmxArg, "-Dcom.sun.management.jmxremote.port=4444", "-Dcom.sun.management.jmxremote.authenticate=false"]
}

task extractTermFrequenciesMatrixFromPositionalIndex(type: CreateStartScripts) {
    mainClassName = "ExtractTermFrequenciesMatrixFromPositionalIndex"
    description = "from a positional index retrieves the term matrix if co-occurrence data the can be used the get the semantic neighbourhood"
    applicationName = "ExtractTermFrequenciesMatrixFromPositionalIndex"
    defaultJvmOpts  = [xmxArg, "-Dcom.sun.management.jmxremote.port=4445", "-Dcom.sun.management.jmxremote.authenticate=false"]
    outputDir = file('build/scripts')
    classpath = startScripts.classpath
}

task retrieveGistsFromIndex(type: CreateStartScripts) {
    mainClassName = "ncd.cli.RetrieveGistsFromPositionalIndex"
    description = "given a positional index like the one created by wikipedia-indexer, creates a directory full of bzipped gists"
    applicationName = "retrieve-gists-from-positional-index"
    defaultJvmOpts  = [xmxArg, "-Dcom.sun.management.jmxremote.port=4445", "-Dcom.sun.management.jmxremote.authenticate=false"]
    outputDir = file('build/scripts')
    classpath = startScripts.classpath
}

task ncdScriptFor2Files(type: CreateStartScripts) {
    mainClassName = "ncd.cli.ncd_for_two_files"
    applicationName = "ncd_for_two"
    defaultJvmOpts  = [xmxArg, "-Dcom.sun.management.jmxremote.port=4446", "-Dcom.sun.management.jmxremote.authenticate=false"]
    outputDir = file('build/scripts')
    classpath = startScripts.classpath
}

task ncdScriptForDir(type: CreateStartScripts) {
    mainClassName = "ncd.cli.ncd_for_dir"
    applicationName = "ncd_for_dir"
    defaultJvmOpts  = [xmxArg, "-Dcom.sun.management.jmxremote.port=4446", "-Dcom.sun.management.jmxremote.authenticate=false"]
    outputDir = file('build/scripts')
    classpath = startScripts.classpath
}

task termMatrixGetNeighbours(type: CreateStartScripts) {
    mainClassName = "ncd.cli.term_matrix_get_neighbours"
    applicationName = "term_matrix_get_neighbours"
    defaultJvmOpts  = [xmxArg, "-Dcom.sun.management.jmxremote.port=4446", "-Dcom.sun.management.jmxremote.authenticate=false"]
    outputDir = file('build/scripts')
    classpath = startScripts.classpath
}

task termMatrixGetRow(type: CreateStartScripts) {
    mainClassName = "ncd.cli.term_matrix_get_row"
    applicationName = "term_matrix_get_row"
    defaultJvmOpts  = [xmxArg, "-Dcom.sun.management.jmxremote.port=4446", "-Dcom.sun.management.jmxremote.authenticate=false"]
    outputDir = file('build/scripts')
    classpath = startScripts.classpath
}

task termMatrixGetTerms(type: CreateStartScripts) {
    mainClassName = "ncd.cli.term_matrix_get_terms"
    applicationName = "term_matrix_get_terms"
    defaultJvmOpts  = [xmxArg]
    outputDir = file('build/scripts')
    classpath = startScripts.classpath
}

applicationDistribution.into("bin") {
    duplicatesStrategy= DuplicatesStrategy.EXCLUDE
    from(retrieveGistsFromIndex)
    from(extractTermFrequenciesMatrixFromPositionalIndex)
    from(ncdScriptFor2Files)
    from(ncdScriptForDir)
    from(termMatrixGetNeighbours)
    from(termMatrixGetRow)
    from(termMatrixGetTerms)

    fileMode = 0755
}

repositories {
    mavenLocal()
    maven {
        url = 'http://repo.maven.apache.org/maven2'
    }
}

dependencies {
    implementation 'junit:junit:4.5'
    implementation 'log4j:log4j:1.2.17'
    implementation 'commons-io:commons-io:1.4'
    implementation 'commons-lang:commons-lang:2.4'
    implementation 'commons-collections:commons-collections:3.2.2'
    implementation 'org.apache.commons:commons-compress:1.19'
    implementation 'commons-cli:commons-cli:1.1'
    
    implementation 'com.thoughtworks.xstream:xstream:1.4.6'
    implementation 'colt:colt:1.2.0'
    implementation 'org.apache.lucene:lucene-core:2.4.1'
    implementation 'org.apache.lucene:lucene-analyzers:2.4.1'
    implementation 'org.apache.lucene:lucene-wikipedia:2.4.1'
    implementation 'org.apache.lucene:lucene-snowball:2.4.1'
    implementation 'org.springframework:spring-jdbc:2.5.6'
    implementation 'mysql:mysql-connector-java:5.1.6'
    implementation 'org.codehaus.groovy:groovy-all:2.5.6'
}

group = 'pertinence'
version = '1.1-SNAPSHOT'
description = 'NGD/NCD indexer app'
sourceCompatibility = '1.8'

publishing {
    publications {
        myLibrary(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            name = 'myRepo'
            if(project.version.endsWith('-SNAPSHOT')) {
                url = "file:///gv0/repo/snapshots"
            } else {
                url = "file:///gv0/repo/releases"
            }
        }
    }
}



publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}
